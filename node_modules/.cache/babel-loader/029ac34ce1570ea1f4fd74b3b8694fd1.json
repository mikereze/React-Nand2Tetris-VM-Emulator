{"ast":null,"code":"var _jsxFileName = \"/home/mike/Documents/Assembler/src/App.js\";\nimport React from 'react';\nimport './App.css';\nimport { useState } from 'react';\nconst symbols = {\n  R0: \"0\",\n  R1: \"1\",\n  R2: \"2\",\n  R3: \"3\",\n  R4: \"4\",\n  R5: \"5\",\n  R6: \"6\",\n  R7: \"7\",\n  R8: \"8\",\n  R9: \"9\",\n  R10: \"10\",\n  R11: \"11\",\n  R12: \"12\",\n  R13: \"13\",\n  R14: \"14\",\n  R15: \"15\",\n  SCREEN: \"16384\",\n  KBD: \"24576\",\n  SP: \"0\",\n  LCL: \"1\",\n  ARG: \"2\",\n  THIS: \"3\",\n  THAT: \"4\"\n};\nconst destination = {\n  null: \"000\",\n  M: \"001\",\n  D: \"010\",\n  MD: \"011\",\n  A: \"100\",\n  AM: \"101\",\n  AD: \"110\",\n  AMD: \"111\"\n};\nconst jump = {\n  null: \"000\",\n  JGT: \"001\",\n  JEQ: \"010\",\n  JGE: \"011\",\n  JLT: \"100\",\n  JNE: \"101\",\n  JLE: \"110\",\n  JMP: \"111\"\n};\nconst compare = [{\n  comparision: \"0\",\n  toBinary: \"0101010\"\n}, {\n  comparision: \"1\",\n  toBinary: \"0111111\"\n}, {\n  comparision: \"-1\",\n  toBinary: \"0111010\"\n}, {\n  comparision: \"D\",\n  toBinary: \"0001100\"\n}, {\n  comparision: \"A\",\n  toBinary: \"0110000\"\n}, {\n  comparision: \"M\",\n  toBinary: \"1110000\"\n}, {\n  comparision: \"!D\",\n  toBinary: \"0001101\"\n}, {\n  comparision: \"!A\",\n  toBinary: \"0110001\"\n}, {\n  comparision: \"!M\",\n  toBinary: \"1110001\"\n}, {\n  comparision: \"-D\",\n  toBinary: \"0001111\"\n}, {\n  comparision: \"-A\",\n  toBinary: \"0110011\"\n}, {\n  comparision: \"-M\",\n  toBinary: \"1110011\"\n}, {\n  comparision: \"D+1\",\n  toBinary: \"0011111\"\n}, {\n  comparision: \"A+1\",\n  toBinary: \"0110111\"\n}, {\n  comparision: \"M+1\",\n  toBinary: \"1110111\"\n}, {\n  comparision: \"D-1\",\n  toBinary: \"0001110\"\n}, {\n  comparision: \"A-1\",\n  toBinary: \"0110010\"\n}, {\n  comparision: \"D+A\",\n  toBinary: \"0000010\"\n}, {\n  comparision: \"D-A\",\n  toBinary: \"0010011\"\n}, {\n  comparision: \"A-D\",\n  toBinary: \"0000111\"\n}, {\n  comparision: \"D&A\",\n  toBinary: \"0000000\"\n}, {\n  comparision: \"D|A\",\n  toBinary: \"0010101\"\n}, {\n  comparision: \"M-1\",\n  toBinary: \"1110010\"\n}, {\n  comparision: \"D+M\",\n  toBinary: \"1000010\"\n}, {\n  comparision: \"D-M\",\n  toBinary: \"1010011\"\n}, {\n  comparision: \"M-D\",\n  toBinary: \"1000111\"\n}, {\n  comparision: \"D&M\",\n  toBinary: \"1000000\"\n}, {\n  comparision: \"D|M\",\n  toBinary: \"1010101\"\n}];\n\nconst ImportFromFileComponent = ({\n  handleFileChosen\n}) => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  }, \"Hello there you can load your assembly code\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"file\",\n    accept: \".asm\",\n    onChange: e => handleFileChosen(e.target.files[0]),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }\n  }));\n};\n\nconst Commenthandling = ({\n  content\n}) => {\n  const regexAinst = /@/;\n  const regexCinst = /[A-Z]/;\n  const content_main = [];\n\n  for (var x = 0; x < content.length; x++) {\n    const singleLine = content[x].trim();\n\n    if (!singleLine.startsWith(\"//\") && (regexAinst.test(singleLine) || regexCinst.test(singleLine))) {\n      if (singleLine.includes(\"//\")) {\n        const index = singleLine.indexOf(\"/\");\n        console.log(singleLine.length());\n      }\n    }\n\n    content_main.push(singleLine);\n  }\n\n  console.log(\"This is the first \", content_main);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }\n  });\n};\n\nconst Labelhandling = ({\n  content\n}) => {\n  // const regLabel = /([A-Z])/;\n  const extractor = singleLine => {\n    const temp = singleLine.replace(\"(\", \"\");\n    const temp2 = temp.replace(\")\", \"\");\n    return temp2;\n  };\n\n  const addAndReplaceLabels = (singleLine_content, x) => {\n    symbols[singleLine_content] = x + 2;\n    const tobeReturned = x + 2;\n    return tobeReturned;\n  };\n\n  for (var x = 0; x < content.length; x++) {\n    if (content[x].includes('(')) {\n      const extracted = extractor(content[x]);\n      const toBeUpdated = \"@\" + addAndReplaceLabels(extracted, x);\n      content[x] = toBeUpdated;\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Variablehandlng, {\n    content: content,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 5\n    }\n  }));\n};\n\nconst Variablehandlng = ({\n  content\n}) => {\n  let count = 16;\n  const regexSymbol = /[A-Z]/;\n  const regAinstruction = /@[0-9]/;\n\n  const addNewVariables = tobeAddedSymbol => {\n    symbols[tobeAddedSymbol] = count.toString();\n    const tobeReplaced = replacExisitingVariables(tobeAddedSymbol);\n    count++;\n    return tobeReplaced;\n  };\n\n  const replacExisitingVariables = singleLine_content => {\n    Object.keys(symbols).map(item => {\n      if (singleLine_content.trim() === item) {\n        let updatedSymbol = \"@\" + symbols[item];\n        singleLine_content = updatedSymbol;\n      }\n    });\n    return singleLine_content;\n  };\n\n  for (var x = 0; x < content.length; x++) {\n    if (content[x].includes('@') && !regAinstruction.test(content[x])) {\n      content[x] = content[x].replace('@', '');\n\n      if (Object.keys(symbols).includes(content[x].trim())) {\n        const replacedVarible = replacExisitingVariables(content[x]);\n        content[x] = replacedVarible;\n      } else {\n        if (regexSymbol.test(content[x])) {\n          const updatedVariable = addNewVariables(content[x].trim());\n          content[x] = updatedVariable;\n        }\n      }\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Ainstruction, {\n    content: content,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 9\n    }\n  }));\n};\n\nconst AfterLoad = ({\n  content\n}) => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Commenthandling, {\n    content: content,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 13\n    }\n  }));\n};\n\nconst ConvertToFile = ({\n  content\n}) => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 9\n    }\n  }, content.map(item => {\n    return /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 28\n      }\n    }, item);\n  }));\n};\n\nconst Cinstruction = ({\n  content\n}) => {\n  const separator = singleLine => {\n    let jmp,\n        cmp,\n        dst = \"\";\n\n    if (singleLine.includes('=')) {\n      var dst_cmp = singleLine.split('=');\n      dst = dst_cmp[0];\n    }\n\n    if (!dst_cmp[1].includes(\";\")) {\n      cmp = dst_cmp[1].trim();\n    } else if (dst_cmp[1].includes(\";\")) {\n      if (!singleLine.includes('=')) {\n        cmp = dst_cmp[0];\n      } else {\n        var cmp_jmp = dst_cmp[1].split(\";\");\n        cmp = cmp_jmp[0].trim();\n        jmp = cmp_jmp[1].trim();\n      }\n    }\n\n    const separated = [cmp, dst, jmp];\n    return separated;\n  };\n\n  const binaryConverter = arrayOfSeparated => {\n    let compBinary = \"\";\n    let destBinary = \"000\";\n    let jumpBinary = \"000\";\n    let cmp = arrayOfSeparated[0];\n    let dst = arrayOfSeparated[1];\n    let jmp = arrayOfSeparated[2];\n    compare.map(item => {\n      if (item.comparision === cmp) {\n        compBinary = item.toBinary;\n      }\n\n      return \"compare\";\n    });\n\n    if (dst !== undefined) {\n      Object.keys(destination).map(item => {\n        if (item === dst) {\n          destBinary = destination[item];\n        }\n\n        return \"destination\";\n      });\n    }\n\n    if (jmp !== undefined) {\n      Object.keys(jump).map(item => {\n        if (item === jmp) {\n          jumpBinary = jump[item];\n        }\n\n        return \"jump\";\n      });\n    }\n\n    const convertedBinaryCinst = [compBinary, destBinary, jumpBinary];\n    return convertedBinaryCinst;\n  };\n\n  const concatinator = convertedCinst => {\n    const convertedCinstruction = \"111\" + convertedCinst[0] + convertedCinst[1] + convertedCinst[2];\n    return convertedCinstruction;\n  };\n\n  for (var x = 0; x < content.length; x++) {\n    if (content[x].includes('=') || content[x].includes(';')) {\n      const arrayOfSeparated = separator(content[x]);\n      const convertedCinst = binaryConverter(arrayOfSeparated);\n      content[x] = concatinator(convertedCinst);\n    }\n  }\n\n  console.log(content);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ConvertToFile, {\n    content: content,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 13\n    }\n  }));\n};\n\nconst Ainstruction = ({\n  content\n}) => {\n  var regex = /@[0-9]/;\n\n  const digits_count = n => {\n    var count = 0;\n    if (n >= 0) ++count;\n\n    while (n / 10 >= 1) {\n      n /= 10;\n      ++count;\n    }\n\n    return count;\n  };\n\n  const decimaltoBinary = toBeBinary => {\n    const removedAt = toBeBinary.replace('@', '');\n    const converted = parseInt(removedAt, 10).toString(2);\n    const toBeFilled = 16 - digits_count(converted);\n    const filler = '0'.repeat(toBeFilled);\n    const binary = filler + converted;\n    return binary;\n  };\n\n  for (var x = 0; x < content.length; x++) {\n    if (regex.test(content[x])) {\n      const value = decimaltoBinary(content[x]);\n      content[x] = value;\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 355,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Cinstruction, {\n    content: content,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 356,\n      columnNumber: 13\n    }\n  }));\n};\n\nconst App = () => {\n  let fileReader;\n  const [content, setContent] = useState(\" \");\n  const [loaded, setLoaded] = useState(false);\n\n  const handleFileRead = e => {\n    setLoaded(true);\n    setContent(() => fileReader.result.trim().split(\"\\n\"));\n  };\n\n  const handleFileChosen = file => {\n    fileReader = new FileReader();\n    fileReader.onloadend = handleFileRead;\n    fileReader.readAsText(file);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 381,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ImportFromFileComponent, {\n    handleFileChosen: handleFileChosen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 382,\n      columnNumber: 9\n    }\n  }), loaded && /*#__PURE__*/React.createElement(AfterLoad, {\n    content: content,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 383,\n      columnNumber: 20\n    }\n  }));\n};\n\nexport default App;","map":{"version":3,"sources":["/home/mike/Documents/Assembler/src/App.js"],"names":["React","useState","symbols","R0","R1","R2","R3","R4","R5","R6","R7","R8","R9","R10","R11","R12","R13","R14","R15","SCREEN","KBD","SP","LCL","ARG","THIS","THAT","destination","null","M","D","MD","A","AM","AD","AMD","jump","JGT","JEQ","JGE","JLT","JNE","JLE","JMP","compare","comparision","toBinary","ImportFromFileComponent","handleFileChosen","e","target","files","Commenthandling","content","regexAinst","regexCinst","content_main","x","length","singleLine","trim","startsWith","test","includes","index","indexOf","console","log","push","Labelhandling","extractor","temp","replace","temp2","addAndReplaceLabels","singleLine_content","tobeReturned","extracted","toBeUpdated","Variablehandlng","count","regexSymbol","regAinstruction","addNewVariables","tobeAddedSymbol","toString","tobeReplaced","replacExisitingVariables","Object","keys","map","item","updatedSymbol","replacedVarible","updatedVariable","AfterLoad","ConvertToFile","Cinstruction","separator","jmp","cmp","dst","dst_cmp","split","cmp_jmp","separated","binaryConverter","arrayOfSeparated","compBinary","destBinary","jumpBinary","undefined","convertedBinaryCinst","concatinator","convertedCinst","convertedCinstruction","Ainstruction","regex","digits_count","n","decimaltoBinary","toBeBinary","removedAt","converted","parseInt","toBeFilled","filler","repeat","binary","value","App","fileReader","setContent","loaded","setLoaded","handleFileRead","result","file","FileReader","onloadend","readAsText"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;AACA,SAAQC,QAAR,QAAuB,OAAvB;AAEA,MAAMC,OAAO,GAAG;AACZC,EAAAA,EAAE,EAAG,GADO;AAEZC,EAAAA,EAAE,EAAG,GAFO;AAGZC,EAAAA,EAAE,EAAG,GAHO;AAIZC,EAAAA,EAAE,EAAG,GAJO;AAKZC,EAAAA,EAAE,EAAG,GALO;AAMZC,EAAAA,EAAE,EAAG,GANO;AAOZC,EAAAA,EAAE,EAAG,GAPO;AAQZC,EAAAA,EAAE,EAAG,GARO;AASZC,EAAAA,EAAE,EAAG,GATO;AAUZC,EAAAA,EAAE,EAAG,GAVO;AAWZC,EAAAA,GAAG,EAAG,IAXM;AAYZC,EAAAA,GAAG,EAAG,IAZM;AAaZC,EAAAA,GAAG,EAAG,IAbM;AAcZC,EAAAA,GAAG,EAAG,IAdM;AAeZC,EAAAA,GAAG,EAAG,IAfM;AAgBZC,EAAAA,GAAG,EAAG,IAhBM;AAiBZC,EAAAA,MAAM,EAAG,OAjBG;AAkBZC,EAAAA,GAAG,EAAG,OAlBM;AAmBZC,EAAAA,EAAE,EAAG,GAnBO;AAoBZC,EAAAA,GAAG,EAAG,GApBM;AAqBZC,EAAAA,GAAG,EAAG,GArBM;AAsBZC,EAAAA,IAAI,EAAG,GAtBK;AAuBZC,EAAAA,IAAI,EAAG;AAvBK,CAAhB;AA0BA,MAAMC,WAAW,GACb;AACCC,EAAAA,IAAI,EAAI,KADT;AAECC,EAAAA,CAAC,EAAG,KAFL;AAGCC,EAAAA,CAAC,EAAG,KAHL;AAICC,EAAAA,EAAE,EAAI,KAJP;AAKCC,EAAAA,CAAC,EAAI,KALN;AAMCC,EAAAA,EAAE,EAAG,KANN;AAOCC,EAAAA,EAAE,EAAG,KAPN;AAQCC,EAAAA,GAAG,EAAI;AARR,CADJ;AAWA,MAAMC,IAAI,GAAG;AACTR,EAAAA,IAAI,EAAI,KADC;AAETS,EAAAA,GAAG,EAAG,KAFG;AAGTC,EAAAA,GAAG,EAAG,KAHG;AAITC,EAAAA,GAAG,EAAI,KAJE;AAKTC,EAAAA,GAAG,EAAI,KALE;AAMTC,EAAAA,GAAG,EAAG,KANG;AAOTC,EAAAA,GAAG,EAAG,KAPG;AAQTC,EAAAA,GAAG,EAAI;AARE,CAAb;AAWA,MAAMC,OAAO,GAAG,CACZ;AAAEC,EAAAA,WAAW,EAAE,GAAf;AAAoBC,EAAAA,QAAQ,EAAE;AAA9B,CADY,EAEZ;AAAED,EAAAA,WAAW,EAAE,GAAf;AAAoBC,EAAAA,QAAQ,EAAE;AAA9B,CAFY,EAGZ;AAAED,EAAAA,WAAW,EAAE,IAAf;AAAqBC,EAAAA,QAAQ,EAAE;AAA/B,CAHY,EAIZ;AAAED,EAAAA,WAAW,EAAE,GAAf;AAAoBC,EAAAA,QAAQ,EAAE;AAA9B,CAJY,EAKZ;AAAED,EAAAA,WAAW,EAAE,GAAf;AAAoBC,EAAAA,QAAQ,EAAE;AAA9B,CALY,EAMZ;AAAED,EAAAA,WAAW,EAAE,GAAf;AAAoBC,EAAAA,QAAQ,EAAE;AAA9B,CANY,EAOZ;AAAED,EAAAA,WAAW,EAAE,IAAf;AAAqBC,EAAAA,QAAQ,EAAE;AAA/B,CAPY,EAQZ;AAAED,EAAAA,WAAW,EAAE,IAAf;AAAqBC,EAAAA,QAAQ,EAAE;AAA/B,CARY,EASZ;AAAED,EAAAA,WAAW,EAAE,IAAf;AAAqBC,EAAAA,QAAQ,EAAE;AAA/B,CATY,EAUZ;AAAED,EAAAA,WAAW,EAAE,IAAf;AAAqBC,EAAAA,QAAQ,EAAE;AAA/B,CAVY,EAWZ;AAAED,EAAAA,WAAW,EAAE,IAAf;AAAqBC,EAAAA,QAAQ,EAAE;AAA/B,CAXY,EAYZ;AAAED,EAAAA,WAAW,EAAE,IAAf;AAAqBC,EAAAA,QAAQ,EAAE;AAA/B,CAZY,EAaZ;AAAED,EAAAA,WAAW,EAAE,KAAf;AAAsBC,EAAAA,QAAQ,EAAE;AAAhC,CAbY,EAcZ;AAAED,EAAAA,WAAW,EAAE,KAAf;AAAsBC,EAAAA,QAAQ,EAAE;AAAhC,CAdY,EAeZ;AAAED,EAAAA,WAAW,EAAE,KAAf;AAAsBC,EAAAA,QAAQ,EAAE;AAAhC,CAfY,EAgBZ;AAAED,EAAAA,WAAW,EAAE,KAAf;AAAsBC,EAAAA,QAAQ,EAAE;AAAhC,CAhBY,EAiBZ;AAAED,EAAAA,WAAW,EAAE,KAAf;AAAsBC,EAAAA,QAAQ,EAAE;AAAhC,CAjBY,EAkBZ;AAAED,EAAAA,WAAW,EAAE,KAAf;AAAsBC,EAAAA,QAAQ,EAAE;AAAhC,CAlBY,EAmBZ;AAAED,EAAAA,WAAW,EAAE,KAAf;AAAsBC,EAAAA,QAAQ,EAAE;AAAhC,CAnBY,EAoBZ;AAAED,EAAAA,WAAW,EAAE,KAAf;AAAsBC,EAAAA,QAAQ,EAAE;AAAhC,CApBY,EAqBZ;AAAED,EAAAA,WAAW,EAAE,KAAf;AAAsBC,EAAAA,QAAQ,EAAE;AAAhC,CArBY,EAsBZ;AAAED,EAAAA,WAAW,EAAE,KAAf;AAAsBC,EAAAA,QAAQ,EAAE;AAAhC,CAtBY,EAuBZ;AAAED,EAAAA,WAAW,EAAE,KAAf;AAAsBC,EAAAA,QAAQ,EAAE;AAAhC,CAvBY,EAwBZ;AAAED,EAAAA,WAAW,EAAE,KAAf;AAAsBC,EAAAA,QAAQ,EAAE;AAAhC,CAxBY,EAyBZ;AAAED,EAAAA,WAAW,EAAE,KAAf;AAAsBC,EAAAA,QAAQ,EAAE;AAAhC,CAzBY,EA0BZ;AAAED,EAAAA,WAAW,EAAE,KAAf;AAAsBC,EAAAA,QAAQ,EAAE;AAAhC,CA1BY,EA2BZ;AAAED,EAAAA,WAAW,EAAE,KAAf;AAAsBC,EAAAA,QAAQ,EAAE;AAAhC,CA3BY,EA4BZ;AAAED,EAAAA,WAAW,EAAE,KAAf;AAAsBC,EAAAA,QAAQ,EAAE;AAAhC,CA5BY,CAAhB;;AAiCA,MAAMC,uBAAuB,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAwB;AACpD,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mDADA,eAEA;AAAO,IAAA,IAAI,EAAC,MAAZ;AACQ,IAAA,MAAM,EAAC,MADf;AAEQ,IAAA,QAAQ,EAAIC,CAAD,IAAOD,gBAAgB,CAACC,CAAC,CAACC,MAAF,CAASC,KAAT,CAAe,CAAf,CAAD,CAF1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFA,CADJ;AASH,CAVD;;AAYA,MAAMC,eAAe,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAe;AAEnC,QAAMC,UAAU,GAAG,GAAnB;AACA,QAAMC,UAAU,GAAG,OAAnB;AAMA,QAAMC,YAAY,GAAG,EAArB;;AAEA,OAAI,IAAIC,CAAC,GAAE,CAAX,EAAaA,CAAC,GAAGJ,OAAO,CAACK,MAAzB,EAAiCD,CAAC,EAAlC,EAAqC;AACjC,UAAME,UAAU,GAAGN,OAAO,CAACI,CAAD,CAAP,CAAWG,IAAX,EAAnB;;AACA,QAAG,CAACD,UAAU,CAACE,UAAX,CAAsB,IAAtB,CAAD,KAAiCP,UAAU,CAACQ,IAAX,CAAgBH,UAAhB,KAA+BJ,UAAU,CAACO,IAAX,CAAgBH,UAAhB,CAAhE,CAAH,EAAiG;AAC7F,UAAGA,UAAU,CAACI,QAAX,CAAoB,IAApB,CAAH,EAA6B;AACzB,cAAMC,KAAK,GAAGL,UAAU,CAACM,OAAX,CAAmB,GAAnB,CAAd;AAEGC,QAAAA,OAAO,CAACC,GAAR,CAAYR,UAAU,CAACD,MAAX,EAAZ;AACF;AACJ;;AACDF,IAAAA,YAAY,CAACY,IAAb,CAAkBT,UAAlB;AACH;;AAELO,EAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAiCX,YAAjC;AACA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAMH,CA9BD;;AAgCA,MAAMa,aAAa,GAAG,CAAC;AAAChB,EAAAA;AAAD,CAAD,KAAe;AAGlC;AAGC,QAAMiB,SAAS,GAAIX,UAAD,IAAgB;AAC9B,UAAMY,IAAI,GAAGZ,UAAU,CAACa,OAAX,CAAmB,GAAnB,EAAuB,EAAvB,CAAb;AACA,UAAMC,KAAK,GAAGF,IAAI,CAACC,OAAL,CAAa,GAAb,EAAiB,EAAjB,CAAd;AACA,WAAOC,KAAP;AACH,GAJD;;AAMA,QAAMC,mBAAmB,GAAG,CAACC,kBAAD,EAAoBlB,CAApB,KAA0B;AAC9CtD,IAAAA,OAAO,CAACwE,kBAAD,CAAP,GAA8BlB,CAAC,GAAG,CAAlC;AACA,UAAMmB,YAAY,GAAInB,CAAC,GAAG,CAA1B;AACA,WAAOmB,YAAP;AAEP,GALD;;AAMA,OAAI,IAAInB,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACJ,OAAO,CAACK,MAAtB,EAA6BD,CAAC,EAA9B,EAAiC;AAChC,QAAGJ,OAAO,CAACI,CAAD,CAAP,CAAWM,QAAX,CAAoB,GAApB,CAAH,EAA4B;AACzB,YAAMc,SAAS,GAAGP,SAAS,CAACjB,OAAO,CAACI,CAAD,CAAR,CAA3B;AACA,YAAMqB,WAAW,GAAG,MAAMJ,mBAAmB,CAACG,SAAD,EAAWpB,CAAX,CAA7C;AACAJ,MAAAA,OAAO,CAACI,CAAD,CAAP,GAAaqB,WAAb;AACF;AACL;;AAED,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA,oBAAC,eAAD;AAAiB,IAAA,OAAO,EAAGzB,OAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,CADJ;AAKC,CA/BD;;AAiCA,MAAM0B,eAAe,GAAG,CAAC;AAAC1B,EAAAA;AAAD,CAAD,KAAe;AAEnC,MAAI2B,KAAK,GAAG,EAAZ;AACA,QAAMC,WAAW,GAAG,OAApB;AACA,QAAMC,eAAe,GAAG,QAAxB;;AAEA,QAAMC,eAAe,GAAIC,eAAD,IAAqB;AAEzCjF,IAAAA,OAAO,CAACiF,eAAD,CAAP,GAA2BJ,KAAK,CAACK,QAAN,EAA3B;AACA,UAAMC,YAAY,GAAIC,wBAAwB,CAACH,eAAD,CAA9C;AACAJ,IAAAA,KAAK;AACL,WAAOM,YAAP;AACP,GANG;;AASJ,QAAMC,wBAAwB,GAAIZ,kBAAD,IAAwB;AACrDa,IAAAA,MAAM,CAACC,IAAP,CAAYtF,OAAZ,EAAqBuF,GAArB,CAA0BC,IAAD,IAAU;AAC/B,UAAGhB,kBAAkB,CAACf,IAAnB,OAA8B+B,IAAjC,EAAsC;AAClC,YAAIC,aAAa,GAAG,MAAMzF,OAAO,CAACwF,IAAD,CAAjC;AACAhB,QAAAA,kBAAkB,GAAGiB,aAArB;AACH;AACJ,KALD;AAMA,WAAOjB,kBAAP;AACH,GARD;;AAUA,OAAI,IAAIlB,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACJ,OAAO,CAACK,MAAtB,EAA6BD,CAAC,EAA9B,EAAiC;AAC7B,QAAGJ,OAAO,CAACI,CAAD,CAAP,CAAWM,QAAX,CAAoB,GAApB,KAA4B,CAACmB,eAAe,CAACpB,IAAhB,CAAqBT,OAAO,CAACI,CAAD,CAA5B,CAAhC,EAAiE;AAC7DJ,MAAAA,OAAO,CAACI,CAAD,CAAP,GAAaJ,OAAO,CAACI,CAAD,CAAP,CAAWe,OAAX,CAAmB,GAAnB,EAAuB,EAAvB,CAAb;;AAEA,UAAGgB,MAAM,CAACC,IAAP,CAAYtF,OAAZ,EAAqB4D,QAArB,CAA8BV,OAAO,CAACI,CAAD,CAAP,CAAWG,IAAX,EAA9B,CAAH,EAAoD;AAChD,cAAOiC,eAAe,GAAGN,wBAAwB,CAAClC,OAAO,CAACI,CAAD,CAAR,CAAjD;AACAJ,QAAAA,OAAO,CAACI,CAAD,CAAP,GAAaoC,eAAb;AAEH,OAJD,MAKI;AACA,YAAGZ,WAAW,CAACnB,IAAZ,CAAiBT,OAAO,CAACI,CAAD,CAAxB,CAAH,EAAgC;AAC5B,gBAAOqC,eAAe,GAAGX,eAAe,CAAC9B,OAAO,CAACI,CAAD,CAAP,CAAWG,IAAX,EAAD,CAAxC;AACAP,UAAAA,OAAO,CAACI,CAAD,CAAP,GAAaqC,eAAb;AACH;AACJ;AACJ;AAEJ;;AACD,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,YAAD;AAAc,IAAA,OAAO,EAAEzC,OAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ;AAMC,CAjDD;;AAoDA,MAAM0C,SAAS,GAAG,CAAC;AAAC1C,EAAAA;AAAD,CAAD,KAAe;AAC7B,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,eAAD;AAAiB,IAAA,OAAO,EAAEA,OAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ;AAMH,CAPD;;AASA,MAAM2C,aAAa,GAAG,CAAC;AAAC3C,EAAAA;AAAD,CAAD,KAAe;AAGjC,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKA,OAAO,CAACqC,GAAR,CAAaC,IAAD,IAAU;AAChB,wBAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAIA,IAAJ,CAAR;AACN,GAFA,CADL,CADJ;AAQH,CAXD;;AAaA,MAAMM,YAAY,GAAG,CAAC;AAAC5C,EAAAA;AAAD,CAAD,KAAe;AAEhC,QAAM6C,SAAS,GAAIvC,UAAD,IAAgB;AAC9B,QAAIwC,GAAJ;AAAA,QAAQC,GAAR;AAAA,QAAYC,GAAG,GAAG,EAAlB;;AACA,QAAG1C,UAAU,CAACI,QAAX,CAAoB,GAApB,CAAH,EAA4B;AACxB,UAAIuC,OAAO,GAAG3C,UAAU,CAAC4C,KAAX,CAAiB,GAAjB,CAAd;AACAF,MAAAA,GAAG,GAAGC,OAAO,CAAC,CAAD,CAAb;AACF;;AACF,QAAG,CAACA,OAAO,CAAC,CAAD,CAAP,CAAWvC,QAAX,CAAoB,GAApB,CAAJ,EAA6B;AACxBqC,MAAAA,GAAG,GAAGE,OAAO,CAAC,CAAD,CAAP,CAAW1C,IAAX,EAAN;AACJ,KAFD,MAGK,IAAG0C,OAAO,CAAC,CAAD,CAAP,CAAWvC,QAAX,CAAoB,GAApB,CAAH,EAA4B;AAC7B,UAAG,CAACJ,UAAU,CAACI,QAAX,CAAoB,GAApB,CAAJ,EAA6B;AACzBqC,QAAAA,GAAG,GAAGE,OAAO,CAAC,CAAD,CAAb;AACH,OAFD,MAGI;AACA,YAAIE,OAAO,GAAGF,OAAO,CAAC,CAAD,CAAP,CAAWC,KAAX,CAAiB,GAAjB,CAAd;AACAH,QAAAA,GAAG,GAAGI,OAAO,CAAC,CAAD,CAAP,CAAW5C,IAAX,EAAN;AACAuC,QAAAA,GAAG,GAAGK,OAAO,CAAC,CAAD,CAAP,CAAW5C,IAAX,EAAN;AACH;AAEJ;;AACD,UAAM6C,SAAS,GAAG,CAACL,GAAD,EAAKC,GAAL,EAASF,GAAT,CAAlB;AACA,WAAOM,SAAP;AACH,GAtBD;;AAwBA,QAAMC,eAAe,GAAIC,gBAAD,IAAsB;AAEtC,QAAIC,UAAU,GAAG,EAAjB;AACA,QAAIC,UAAU,GAAG,KAAjB;AACA,QAAIC,UAAU,GAAG,KAAjB;AACA,QAAIV,GAAG,GAAGO,gBAAgB,CAAC,CAAD,CAA1B;AACA,QAAIN,GAAG,GAAGM,gBAAgB,CAAC,CAAD,CAA1B;AACA,QAAIR,GAAG,GAAGQ,gBAAgB,CAAC,CAAD,CAA1B;AAEA/D,IAAAA,OAAO,CAAC8C,GAAR,CAAcC,IAAD,IAAU;AACnB,UAAGA,IAAI,CAAC9C,WAAL,KAAqBuD,GAAxB,EAA4B;AACxBQ,QAAAA,UAAU,GAAIjB,IAAI,CAAC7C,QAAnB;AACH;;AACD,aAAO,SAAP;AACH,KALD;;AAOA,QAAGuD,GAAG,KAAKU,SAAX,EAAqB;AACrBvB,MAAAA,MAAM,CAACC,IAAP,CAAY9D,WAAZ,EAAyB+D,GAAzB,CAA8BC,IAAD,IAAU;AAC/B,YAAGA,IAAI,KAAKU,GAAZ,EAAgB;AAChBQ,UAAAA,UAAU,GAAGlF,WAAW,CAACgE,IAAD,CAAxB;AACC;;AACD,eAAO,aAAP;AACP,OALD;AAMC;;AAED,QAAGQ,GAAG,KAAKY,SAAX,EAAqB;AACjBvB,MAAAA,MAAM,CAACC,IAAP,CAAYrD,IAAZ,EAAkBsD,GAAlB,CAAuBC,IAAD,IAAU;AAC5B,YAAGA,IAAI,KAAKQ,GAAZ,EAAgB;AAChBW,UAAAA,UAAU,GAAG1E,IAAI,CAACuD,IAAD,CAAjB;AACC;;AACD,eAAO,MAAP;AACP,OALG;AAMH;;AACD,UAAMqB,oBAAoB,GAAG,CAACJ,UAAD,EAAYC,UAAZ,EAAuBC,UAAvB,CAA7B;AACA,WAAOE,oBAAP;AACP,GAnCD;;AAqCA,QAAMC,YAAY,GAAIC,cAAD,IAAoB;AACrC,UAAMC,qBAAqB,GAAG,QAAQD,cAAc,CAAC,CAAD,CAAtB,GAA4BA,cAAc,CAAC,CAAD,CAA1C,GAAgDA,cAAc,CAAC,CAAD,CAA5F;AACA,WAAOC,qBAAP;AACH,GAHD;;AAKA,OAAI,IAAI1D,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACJ,OAAO,CAACK,MAAtB,EAA6BD,CAAC,EAA9B,EAAiC;AAC7B,QAAGJ,OAAO,CAACI,CAAD,CAAP,CAAWM,QAAX,CAAoB,GAApB,KAA4BV,OAAO,CAACI,CAAD,CAAP,CAAWM,QAAX,CAAoB,GAApB,CAA/B,EAAwD;AAEpD,YAAM4C,gBAAgB,GAAGT,SAAS,CAAC7C,OAAO,CAACI,CAAD,CAAR,CAAlC;AACA,YAAMyD,cAAc,GAAGR,eAAe,CAACC,gBAAD,CAAtC;AACAtD,MAAAA,OAAO,CAACI,CAAD,CAAP,GAAawD,YAAY,CAACC,cAAD,CAAzB;AACH;AACJ;;AACDhD,EAAAA,OAAO,CAACC,GAAR,CAAYd,OAAZ;AACA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,aAAD;AAAe,IAAA,OAAO,EAAEA,OAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ;AAMH,CAnFD;;AAqFA,MAAM+D,YAAY,GAAG,CAAC;AAAC/D,EAAAA;AAAD,CAAD,KAAe;AAEhC,MAAIgE,KAAK,GAAG,QAAZ;;AAEA,QAAMC,YAAY,GAAIC,CAAD,IAAO;AACxB,QAAIvC,KAAK,GAAG,CAAZ;AACA,QAAGuC,CAAC,IAAI,CAAR,EAAW,EAAEvC,KAAF;;AACX,WAAOuC,CAAC,GAAC,EAAF,IAAQ,CAAf,EAAiB;AACbA,MAAAA,CAAC,IAAG,EAAJ;AACA,QAAEvC,KAAF;AACH;;AACD,WAAOA,KAAP;AACH,GARD;;AAWA,QAAMwC,eAAe,GAAIC,UAAD,IAAgB;AACpC,UAAMC,SAAS,GAAGD,UAAU,CAACjD,OAAX,CAAmB,GAAnB,EAAuB,EAAvB,CAAlB;AACA,UAAMmD,SAAS,GAAGC,QAAQ,CAACF,SAAD,EAAW,EAAX,CAAR,CAAuBrC,QAAvB,CAAgC,CAAhC,CAAlB;AACA,UAAMwC,UAAU,GAAG,KAAKP,YAAY,CAACK,SAAD,CAApC;AACA,UAAMG,MAAM,GAAG,IAAIC,MAAJ,CAAWF,UAAX,CAAf;AACA,UAAMG,MAAM,GAAGF,MAAM,GAAGH,SAAxB;AACA,WAAOK,MAAP;AAEH,GARD;;AAWA,OAAI,IAAIvE,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACJ,OAAO,CAACK,MAAtB,EAA6BD,CAAC,EAA9B,EAAiC;AAC7B,QAAG4D,KAAK,CAACvD,IAAN,CAAWT,OAAO,CAACI,CAAD,CAAlB,CAAH,EAA0B;AACtB,YAAMwE,KAAK,GAAGT,eAAe,CAACnE,OAAO,CAACI,CAAD,CAAR,CAA7B;AACAJ,MAAAA,OAAO,CAACI,CAAD,CAAP,GAAawE,KAAb;AACH;AACJ;;AACD,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,YAAD;AAAc,IAAA,OAAO,EAAE5E,OAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ;AAKH,CArCD;;AAwCA,MAAM6E,GAAG,GAAG,MAAM;AAGd,MAAIC,UAAJ;AACA,QAAM,CAAE9E,OAAF,EAAW+E,UAAX,IAAyBlI,QAAQ,CAAC,GAAD,CAAvC;AACA,QAAM,CAAEmI,MAAF,EAAWC,SAAX,IAAwBpI,QAAQ,CAAC,KAAD,CAAtC;;AAEA,QAAMqI,cAAc,GAAItF,CAAD,IAAO;AACtBqF,IAAAA,SAAS,CAAC,IAAD,CAAT;AACAF,IAAAA,UAAU,CAAC,MAAMD,UAAU,CAACK,MAAX,CAAkB5E,IAAlB,GAAyB2C,KAAzB,CAA+B,IAA/B,CAAP,CAAV;AACP,GAHD;;AAKA,QAAMvD,gBAAgB,GAAIyF,IAAD,IAAU;AAC3BN,IAAAA,UAAU,GAAG,IAAIO,UAAJ,EAAb;AACAP,IAAAA,UAAU,CAACQ,SAAX,GAAuBJ,cAAvB;AACAJ,IAAAA,UAAU,CAACS,UAAX,CAAsBH,IAAtB;AACP,GAJD;;AAMA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA,oBAAC,uBAAD;AAAyB,IAAA,gBAAgB,EAAEzF,gBAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,EAECqF,MAAM,iBAAI,oBAAC,SAAD;AAAW,IAAA,OAAO,EAAEhF,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFX,CADJ;AAMH,CAxBD;;AAyBA,eAAe6E,GAAf","sourcesContent":["import React from 'react';\nimport './App.css';\nimport {useState} from 'react';\n\nconst symbols = {\n    R0 : \"0\",\n    R1 : \"1\",\n    R2 : \"2\",\n    R3 : \"3\",\n    R4 : \"4\",\n    R5 : \"5\",\n    R6 : \"6\",\n    R7 : \"7\",\n    R8 : \"8\",\n    R9 : \"9\",\n    R10 : \"10\",\n    R11 : \"11\",\n    R12 : \"12\",\n    R13 : \"13\",\n    R14 : \"14\",\n    R15 : \"15\",\n    SCREEN : \"16384\",\n    KBD : \"24576\",\n    SP : \"0\",\n    LCL : \"1\",\n    ARG : \"2\",\n    THIS : \"3\",\n    THAT : \"4\"\n}\n\nconst destination = \n    {\n     null  : \"000\",\n     M : \"001\",\n     D : \"010\" ,\n     MD  : \"011\",\n     A  : \"100\" ,\n     AM : \"101\" ,\n     AD : \"110\",\n     AMD  : \"111\" \n    }\nconst jump = {\n    null  : \"000\",\n    JGT : \"001\",\n    JEQ : \"010\" ,\n    JGE  : \"011\",\n    JLT  : \"100\" ,\n    JNE : \"101\" ,\n    JLE : \"110\",\n    JMP  : \"111\" \n}\n\nconst compare = [\n    { comparision: \"0\", toBinary: \"0101010\"},\n    { comparision: \"1\", toBinary: \"0111111\"},\n    { comparision: \"-1\", toBinary: \"0111010\"},\n    { comparision: \"D\", toBinary: \"0001100\"},\n    { comparision: \"A\", toBinary: \"0110000\"},\n    { comparision: \"M\", toBinary: \"1110000\"},\n    { comparision: \"!D\", toBinary: \"0001101\"},\n    { comparision: \"!A\", toBinary: \"0110001\"},\n    { comparision: \"!M\", toBinary: \"1110001\"},\n    { comparision: \"-D\", toBinary: \"0001111\"},\n    { comparision: \"-A\", toBinary: \"0110011\"},\n    { comparision: \"-M\", toBinary: \"1110011\"},\n    { comparision: \"D+1\", toBinary: \"0011111\"},\n    { comparision: \"A+1\", toBinary: \"0110111\"},\n    { comparision: \"M+1\", toBinary: \"1110111\"},\n    { comparision: \"D-1\", toBinary: \"0001110\"},\n    { comparision: \"A-1\", toBinary: \"0110010\"},\n    { comparision: \"D+A\", toBinary: \"0000010\"},\n    { comparision: \"D-A\", toBinary: \"0010011\"},\n    { comparision: \"A-D\", toBinary: \"0000111\"},\n    { comparision: \"D&A\", toBinary: \"0000000\"},\n    { comparision: \"D|A\", toBinary: \"0010101\"},\n    { comparision: \"M-1\", toBinary: \"1110010\"},\n    { comparision: \"D+M\", toBinary: \"1000010\"},\n    { comparision: \"D-M\", toBinary: \"1010011\"},\n    { comparision: \"M-D\", toBinary: \"1000111\"},\n    { comparision: \"D&M\", toBinary: \"1000000\"},\n    { comparision: \"D|M\", toBinary: \"1010101\"}\n]\n\n\n\nconst ImportFromFileComponent = ({handleFileChosen}) => {\n    return (\n        <div >\n        <p>Hello there you can load your assembly code</p>\n        <input type='file'\n                accept=\".asm\"\n                onChange={ (e) => handleFileChosen(e.target.files[0])}/>\n        </div>\n\n    );\n}\n\nconst Commenthandling = ({content}) => {\n\n    const regexAinst = /@/\n    const regexCinst = /[A-Z]/\n\n    \n\n    \n\n    const content_main = [];\n\n    for(var x= 0;x < content.length; x++){\n        const singleLine = content[x].trim();\n        if(!singleLine.startsWith(\"//\") && (regexAinst.test(singleLine) || regexCinst.test(singleLine))) {\n            if(singleLine.includes(\"//\")){\n                const index = singleLine.indexOf(\"/\");\n               \n                   console.log(singleLine.length());\n                }\n            }\n            content_main.push(singleLine);\n        }\n    \n    console.log(\"This is the first \",content_main);\n    return (\n        <div>\n            \n            {/* <Labelhandling content={content_main}/> */}\n            </div>\n    );\n}\n\nconst Labelhandling = ({content}) => {\n\n\n   // const regLabel = /([A-Z])/;\n\n\n    const extractor = (singleLine) => {\n        const temp = singleLine.replace(\"(\",\"\");\n        const temp2 = temp.replace(\")\",\"\");\n        return temp2;\n    }\n\n    const addAndReplaceLabels = (singleLine_content,x) => {\n            symbols[singleLine_content] = x + 2;\n            const tobeReturned =  x + 2;\n            return tobeReturned;\n            \n    }\n    for(var x=0;x<content.length;x++){\n     if(content[x].includes('(')){\n        const extracted = extractor(content[x]);\n        const toBeUpdated = \"@\" + addAndReplaceLabels(extracted,x);\n        content[x] = toBeUpdated;\n     }\n}  \n\nreturn (\n    <div>\n    <Variablehandlng content= {content}/>\n    </div>\n);\n}\n\nconst Variablehandlng = ({content}) => {\n\n    let count = 16;\n    const regexSymbol = /[A-Z]/;\n    const regAinstruction = /@[0-9]/;\n\n    const addNewVariables = (tobeAddedSymbol) => {\n    \n        symbols[tobeAddedSymbol] = count.toString();\n        const tobeReplaced =  replacExisitingVariables(tobeAddedSymbol);\n        count++;\n        return tobeReplaced;\n}\n\n\nconst replacExisitingVariables = (singleLine_content) => {\n    Object.keys(symbols).map((item) => {\n        if(singleLine_content.trim() === item){\n            let updatedSymbol = \"@\" + symbols[item];\n            singleLine_content = updatedSymbol;   \n        }\n    })\n    return singleLine_content;\n}\n\nfor(var x=0;x<content.length;x++){\n    if(content[x].includes('@') && !regAinstruction.test(content[x])){\n        content[x] = content[x].replace('@','');\n\n        if(Object.keys(symbols).includes(content[x].trim())){\n            const  replacedVarible = replacExisitingVariables(content[x]);\n            content[x] = replacedVarible;\n          \n        }\n        else{\n            if(regexSymbol.test(content[x])){\n                const  updatedVariable = addNewVariables(content[x].trim());\n                content[x] = updatedVariable;\n            }\n        }\n    }\n   \n}\nreturn (\n    <div>\n        <Ainstruction content={content}/>\n        </div>\n);\n\n}\n\n\nconst AfterLoad = ({content}) => {\n    return (\n        <div>\n            <Commenthandling content={content}/>    \n        </div>\n\n    );\n}\n\nconst ConvertToFile = ({content}) => {\n\n\n    return (\n        <div>\n            {content.map((item) => {\n                   return  <p>{item}</p>\n            })}\n        </div>\n\n    );\n}\n\nconst Cinstruction = ({content}) => {\n\n    const separator = (singleLine) => {\n        let jmp,cmp,dst = \"\";\n        if(singleLine.includes('=')){\n            var dst_cmp = singleLine.split('=');\n            dst = dst_cmp[0];\n         }\n        if(!dst_cmp[1].includes(\";\")){\n             cmp = dst_cmp[1].trim();\n        }\n        else if(dst_cmp[1].includes(\";\")){\n            if(!singleLine.includes('=')){\n                cmp = dst_cmp[0];\n            }\n            else{\n                var cmp_jmp = dst_cmp[1].split(\";\");\n                cmp = cmp_jmp[0].trim();\n                jmp = cmp_jmp[1].trim();  \n            }\n\n        }\n        const separated = [cmp,dst,jmp]\n        return separated;\n    }\n\n    const binaryConverter = (arrayOfSeparated) => {\n\n            let compBinary = \"\";\n            let destBinary = \"000\";\n            let jumpBinary = \"000\";\n            let cmp = arrayOfSeparated[0];\n            let dst = arrayOfSeparated[1];\n            let jmp = arrayOfSeparated[2];\n            \n            compare.map( (item) => {\n                if(item.comparision === cmp){\n                    compBinary =  item.toBinary;\n                }\n                return \"compare\";\n            }) \n\n            if(dst !== undefined){\n            Object.keys(destination).map((item) => {\n                    if(item === dst){\n                    destBinary = destination[item];\n                    }\n                    return \"destination\";\n            })\n            }\n\n            if(jmp !== undefined){\n                Object.keys(jump).map((item) => {\n                    if(item === jmp){\n                    jumpBinary = jump[item];\n                    }\n                    return \"jump\";\n            })\n            }\n            const convertedBinaryCinst = [compBinary,destBinary,jumpBinary]\n            return convertedBinaryCinst;\n    }\n\n    const concatinator = (convertedCinst) => {\n        const convertedCinstruction = \"111\" + convertedCinst[0] + convertedCinst[1] + convertedCinst[2];\n        return convertedCinstruction;\n    }\n\n    for(var x=0;x<content.length;x++){\n        if(content[x].includes('=') || content[x].includes(';')){\n\n            const arrayOfSeparated = separator(content[x]);\n            const convertedCinst = binaryConverter(arrayOfSeparated);\n            content[x] = concatinator(convertedCinst);\n        }\n    }\n    console.log(content);\n    return (\n        <div>\n            <ConvertToFile content={content}/>\n        </div>\n    );\n\n}\n\nconst Ainstruction = ({content}) => {\n\n    var regex = /@[0-9]/;\n\n    const digits_count = (n) => {\n        var count = 0;\n        if(n >= 0) ++count;\n        while (n/10 >= 1){\n            n/= 10;\n            ++count;\n        }\n        return count\n    }\n\n\n    const decimaltoBinary = (toBeBinary) => {\n        const removedAt = toBeBinary.replace('@','');\n        const converted = parseInt(removedAt,10).toString(2);\n        const toBeFilled = 16 - digits_count(converted);\n        const filler = '0'.repeat(toBeFilled);\n        const binary = filler + converted;\n        return binary;\n\n    }\n\n    \n    for(var x=0;x<content.length;x++){\n        if(regex.test(content[x])){\n            const value = decimaltoBinary(content[x]);\n            content[x] = value;\n        }\n    }\n    return (\n        <div>\n            <Cinstruction content={content}/>\n        </div>\n    );\n}\n\n\nconst App = () => {\n\n\n    let fileReader;\n    const [ content, setContent] = useState(\" \");\n    const [ loaded,  setLoaded] = useState(false);\n\n    const handleFileRead = (e) => {\n            setLoaded(true)\n            setContent(() => fileReader.result.trim().split(\"\\n\"));\n    }\n\n    const handleFileChosen = (file) => {\n            fileReader = new FileReader();\n            fileReader.onloadend = handleFileRead;\n            fileReader.readAsText(file);\n    }\n\n    return (\n        <div>\n        <ImportFromFileComponent handleFileChosen={handleFileChosen}/>\n        {loaded && <AfterLoad content={content}/>}\n        </div>\n    );\n}\nexport default App;"]},"metadata":{},"sourceType":"module"}