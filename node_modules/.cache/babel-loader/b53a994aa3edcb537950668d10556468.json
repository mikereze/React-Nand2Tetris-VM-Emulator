{"ast":null,"code":"var _jsxFileName = \"/home/mike/Documents/Assembler/src/App.js\";\nimport React from 'react';\nimport './App.css';\nimport { useState } from 'react';\nconst destination = {\n  null: \"000\",\n  M: \"001\",\n  D: \"010\",\n  MD: \"011\",\n  A: \"100\",\n  AM: \"101\",\n  AD: \"110\",\n  AMD: \"111\"\n};\nconst jump = {\n  null: \"000\",\n  JGT: \"001\",\n  JEQ: \"010\",\n  JGE: \"011\",\n  JLT: \"100\",\n  JNE: \"101\",\n  JLE: \"110\",\n  JMP: \"111\"\n};\n\nconst ImportFromFileComponent = ({\n  handleFileChosen\n}) => {\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, \"Hello there you can load your assembly code\"), React.createElement(\"input\", {\n    type: \"file\",\n    accept: \".asm\",\n    onChange: e => handleFileChosen(e.target.files[0]),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }));\n};\n\nconst AfterLoad = ({\n  content\n}) => {\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, React.createElement(Ainstruction, {\n    content: content,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }));\n};\n\nconst Cinstruction = ({\n  content\n}) => {\n  for (var x = 0; x < content.length; x++) {\n    if (content[x].includes('=')) {\n      var jmp,\n          cmp,\n          dst = null;\n      var dst_cmp = content[x].split('=');\n      dst = dst_cmp[0];\n\n      if (!dst_cmp[1].includes(\";\")) {\n        cmp = dst_cmp[1];\n      } else if (dst_cmp[1].includes(\";\")) {\n        var cmp_jmp = dst_cmp[1].split(\";\");\n        cmp = cmp_jmp[0];\n        jmp = cmp_jmp[1];\n      }\n\n      Object.keys(destination).map(item => {\n        if (item === dst) {\n          return console.log(\"This is the Binary baby\", destination[item]);\n        }\n\n        return \"ndsjfk\";\n      });\n      Object.keys(jump).map(item => {\n        if (item === jmp) {\n          return console.log(\"THis is the Binary babbbbbbbbby\", jump[item]);\n        } else if (jmp === undefined) {\n          return jump[\"null\"];\n        }\n\n        return \"gjfks\";\n      });\n      console.log(\"This is the CMP\", dst);\n      console.log(\"THis is the COmparition\", cmp);\n      console.log(\"This is the Jmp\", jmp);\n    }\n  }\n\n  return \"c instruction\";\n};\n\nconst Ainstruction = ({\n  content\n}) => {\n  var regex = /@[0-9]/;\n\n  const digits_count = n => {\n    var count = 0;\n    if (n >= 0) ++count;\n\n    while (n / 10 >= 1) {\n      n /= 10;\n      ++count;\n    }\n\n    return count;\n  };\n\n  const decimaltoBinary = toBeBinary => {\n    const removedAt = toBeBinary.replace('@', '');\n    const converted = parseInt(removedAt, 10).toString(2);\n    const toBeFilled = 16 - digits_count(converted);\n    const filler = '0'.repeat(toBeFilled);\n    const binary = filler + converted;\n    return binary;\n  };\n\n  for (var x = 0; x < content.length; x++) {\n    if (regex.test(content[x])) {\n      const value = decimaltoBinary(content[x]);\n      content[x] = value;\n    }\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, React.createElement(Cinstruction, {\n    content: content,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }));\n};\n\nconst App = () => {\n  let fileReader;\n  const [content, setContent] = useState(\" \");\n  const [loaded, setLoaded] = useState(false);\n\n  const handleFileRead = e => {\n    setLoaded(true);\n    setContent(() => fileReader.result.trim().split(\"\\n\"));\n  };\n\n  const handleFileChosen = file => {\n    fileReader = new FileReader();\n    fileReader.onloadend = handleFileRead;\n    fileReader.readAsText(file);\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }, React.createElement(ImportFromFileComponent, {\n    handleFileChosen: handleFileChosen,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }), loaded && React.createElement(AfterLoad, {\n    content: content,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }));\n};\n\nexport default App;","map":{"version":3,"sources":["/home/mike/Documents/Assembler/src/App.js"],"names":["React","useState","destination","null","M","D","MD","A","AM","AD","AMD","jump","JGT","JEQ","JGE","JLT","JNE","JLE","JMP","ImportFromFileComponent","handleFileChosen","e","target","files","AfterLoad","content","Cinstruction","x","length","includes","jmp","cmp","dst","dst_cmp","split","cmp_jmp","Object","keys","map","item","console","log","undefined","Ainstruction","regex","digits_count","n","count","decimaltoBinary","toBeBinary","removedAt","replace","converted","parseInt","toString","toBeFilled","filler","repeat","binary","test","value","App","fileReader","setContent","loaded","setLoaded","handleFileRead","result","trim","file","FileReader","onloadend","readAsText"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\nimport {useState} from 'react';\n\nconst destination = \n    {\n     null  : \"000\",\n     M : \"001\",\n     D : \"010\" ,\n     MD  : \"011\",\n     A  : \"100\" ,\n     AM : \"101\" ,\n     AD : \"110\",\n     AMD  : \"111\" \n    }\nconst jump = {\n    null  : \"000\",\n    JGT : \"001\",\n    JEQ : \"010\" ,\n    JGE  : \"011\",\n    JLT  : \"100\" ,\n    JNE : \"101\" ,\n    JLE : \"110\",\n    JMP  : \"111\" \n}\n\n\n\nconst ImportFromFileComponent = ({handleFileChosen}) => {\n    return (\n        <div >\n        <p>Hello there you can load your assembly code</p>\n        <input type='file'\n                accept=\".asm\"\n                onChange={ (e) => handleFileChosen(e.target.files[0])}/>\n        </div>\n\n    );\n}\n\nconst AfterLoad = ({content}) => {\n    return (\n        <div>\n            <Ainstruction content={content}/>\n            \n        </div>\n\n    );\n}\n\nconst Cinstruction = ({content}) => {\n    for(var x=0;x<content.length;x++){\n        if(content[x].includes('=')){\n            var jmp,cmp,dst = null;\n            var dst_cmp = content[x].split('=');\n                 dst = dst_cmp[0];\n            if(!dst_cmp[1].includes(\";\")){\n                 cmp = dst_cmp[1];\n            }\n            else if(dst_cmp[1].includes(\";\")){\n                var cmp_jmp = dst_cmp[1].split(\";\");\n                 cmp = cmp_jmp[0];\n                 jmp = cmp_jmp[1];\n            }\n            Object.keys(destination).map((item) => {\n                    if(item === dst){\n                       return  console.log(\"This is the Binary baby\",destination[item]);\n                    }\n                    return \"ndsjfk\";\n            })\n            Object.keys(jump).map((item) => {\n                    if(item === jmp){\n                       return console.log(\"THis is the Binary babbbbbbbbby\",jump[item])\n                    }\n                    else if(jmp === undefined){\n                        return jump[\"null\"];\n                    }\n                    return \"gjfks\";\n            })\n            console.log(\"This is the CMP\", dst);\n            console.log(\"THis is the COmparition\",cmp);\n            console.log(\"This is the Jmp\",jmp);\n        }\n\n    }\n    return \"c instruction\";\n\n}\n\nconst Ainstruction = ({content}) => {\n\n    var regex = /@[0-9]/;\n\n    const digits_count = (n) => {\n        var count = 0;\n        if(n >= 0) ++count;\n        while (n/10 >= 1){\n            n/= 10;\n            ++count;\n        }\n        return count\n    }\n\n\n    const decimaltoBinary = (toBeBinary) => {\n        const removedAt = toBeBinary.replace('@','');\n        const converted = parseInt(removedAt,10).toString(2);\n        const toBeFilled = 16 - digits_count(converted);\n        const filler = '0'.repeat(toBeFilled);\n        const binary = filler + converted;\n        return binary;\n\n    }\n\n    \n    for(var x=0;x<content.length;x++){\n        if(regex.test(content[x])){\n            const value = decimaltoBinary(content[x]);\n            content[x] = value;\n        }\n    }\n    \n\n\n    return (\n        <div>\n            <Cinstruction content={content}/>\n        </div>\n    ); \n}\n\n\nconst App = () => {\n\n\n    let fileReader;\n    const [ content, setContent] = useState(\" \");\n    const [ loaded,  setLoaded] = useState(false);\n\n    const handleFileRead = (e) => {\n            setLoaded(true)\n            setContent(() => fileReader.result.trim().split(\"\\n\"));\n    }\n\n    const handleFileChosen = (file) => {\n            fileReader = new FileReader();\n            fileReader.onloadend = handleFileRead;\n            fileReader.readAsText(file);\n    }\n\n    return (\n        <div>\n        <ImportFromFileComponent handleFileChosen={handleFileChosen}/>\n        {loaded && <AfterLoad content={content}/>}\n        </div>\n    );\n  \n\n}\n\n\nexport default App;"]},"metadata":{},"sourceType":"module"}