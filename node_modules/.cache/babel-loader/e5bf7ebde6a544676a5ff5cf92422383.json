{"ast":null,"code":"var _jsxFileName = \"/home/mike/Documents/Nand2Tetris React Projects/VM Translator/src/Components/Codewriter.js\";\nimport React from 'react';\n\nconst Codewriter = ({\n  content\n}) => {\n  const Assembly_code = [\"dsbjfds\"];\n  const mappingObj = {\n    local: \"LCL\",\n    argument: \"ARG\",\n    this: \"THIS\",\n    that: \"THAT\"\n  };\n\n  const pushHandler = singleLine => {\n    const singleLine_content = singleLine.replace(\"push\", \"\");\n\n    if (singleLine_content.includes(\"constant\") || singleLine_content.includes(\"pointer\")) {\n      const temp = singleLine_content.replace(\"constant\", \"\");\n      const singleLine_constant = temp.trim();\n      const tobePushed = \"@\" + singleLine_constant;\n      const constant_arr = [tobePushed, \"D=A\", \"@SP\", \"A=M\", \"M=D\", \"@SP\", \"M=M+1\"];\n      return {\n        Assembly_code,\n        ...constant_arr\n      }; // return console.log(\"This is the Number in the Constant\",constant_arr,\"and \",Assembly_code);\n    } else if (singleLine_content.includes(\"static\")) {\n      const temp = singleLine_content.replace(\"static\", \"\");\n      const singleLine_static = temp.trim();\n      return console.log(\"This is the Number in the static\", singleLine_static);\n    } else {\n      const tobeSeparated = singleLine_content.trim();\n      const segments = tobeSeparated.split(\" \");\n      console.log(\"This is the Segment\", segments[0], \"and this is the number\", segments[1]);\n      const firstValue = \"@\" + segments[1];\n      let nextValue = \"\";\n\n      if (Object.keys(mappingObj).includes(segments[0])) {\n        nextValue = \"@\" + mappingObj[segments[0]];\n      } else {\n        nextValue = \"@\" + segments[0];\n      }\n\n      const segmentArr = [firstValue, \"D=A\", nextValue, \"A=M+D\", \"D=M\", \"@SP\", \"A=M\", \"M=D\", \"SP\", \"M=M+1\"];\n      return console.log(\"This is the Push Rest of the Members\", segmentArr);\n    }\n  };\n\n  const popHandler = singleLine_content => {\n    if (singleLine_content.includes(\"pointer\")) {\n      return console.log(\"This is the Pop Pointer Handler\", singleLine_content);\n    } else if (singleLine_content.includes(\"static\")) {\n      return console.log(\"This is the Pop Static Handler\", singleLine_content);\n    } else {\n      return console.log(\"This is the Pop Rest of the Members\", singleLine_content);\n    }\n  };\n\n  const artihmeticHandler = singleLine_content => {\n    return console.log(\"This is the Arthimetic Members\", singleLine_content);\n  };\n\n  const codeReplacer = singleLine_content => {\n    if (singleLine_content.startsWith(\"push\")) {\n      pushHandler(singleLine_content);\n    } else if (singleLine_content.startsWith(\"pop\")) {\n      popHandler(singleLine_content);\n    } else {\n      artihmeticHandler(singleLine_content);\n    }\n  };\n\n  content.map(item => {\n    console.log(\"This is the Assembly\", Assembly_code);\n    return codeReplacer(item);\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }, \"Yo Niggas\");\n};\n\nexport default Codewriter;","map":{"version":3,"sources":["/home/mike/Documents/Nand2Tetris React Projects/VM Translator/src/Components/Codewriter.js"],"names":["React","Codewriter","content","Assembly_code","mappingObj","local","argument","this","that","pushHandler","singleLine","singleLine_content","replace","includes","temp","singleLine_constant","trim","tobePushed","constant_arr","singleLine_static","console","log","tobeSeparated","segments","split","firstValue","nextValue","Object","keys","segmentArr","popHandler","artihmeticHandler","codeReplacer","startsWith","map","item"],"mappings":"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","sourcesContent":["import React from 'react';\n\nconst Codewriter = ({content}) => {\n\n    const Assembly_code = [\"dsbjfds\"];\n    const mappingObj = { local : \"LCL\",argument : \"ARG\", this: \"THIS\",that: \"THAT\"}\n\n    const pushHandler = (singleLine) => {\n        const singleLine_content = singleLine.replace(\"push\",\"\");\n        if(singleLine_content.includes(\"constant\") || singleLine_content.includes(\"pointer\")){\n            const temp = singleLine_content.replace(\"constant\",\"\");\n            const singleLine_constant = temp.trim();\n            const tobePushed = \"@\" + singleLine_constant;\n            const constant_arr = [tobePushed,\"D=A\",\"@SP\",\"A=M\",\"M=D\",\"@SP\",\"M=M+1\"];\n          return   {Assembly_code,...constant_arr};\n            // return console.log(\"This is the Number in the Constant\",constant_arr,\"and \",Assembly_code);\n\n        }\n        else if(singleLine_content.includes(\"static\")){\n            const temp = singleLine_content.replace(\"static\",\"\");\n            const singleLine_static = temp.trim();\n            return console.log(\"This is the Number in the static\",singleLine_static);\n        }\n        else{\n            const tobeSeparated = singleLine_content.trim();\n            const segments = tobeSeparated.split(\" \");\n            console.log(\"This is the Segment\",segments[0],\"and this is the number\",segments[1]);\n            const firstValue = \"@\" +segments[1];\n            let nextValue = \"\";\n            if(Object.keys(mappingObj).includes(segments[0])){\n                    nextValue = \"@\" + mappingObj[segments[0]]\n            }\n            else{\n                nextValue = \"@\" + segments[0]\n            }\n            const segmentArr = [firstValue,\"D=A\",nextValue,\"A=M+D\",\"D=M\",\"@SP\",\"A=M\",\"M=D\",\"SP\",\"M=M+1\"]\n           return console.log(\"This is the Push Rest of the Members\",segmentArr)\n        }\n    }\n    const popHandler = (singleLine_content) => {\n        if(singleLine_content.includes(\"pointer\")){\n            return console.log(\"This is the Pop Pointer Handler\",singleLine_content);\n        }\n        else if(singleLine_content.includes(\"static\")){\n            return console.log(\"This is the Pop Static Handler\",singleLine_content)\n        }\n        else{\n            return console.log(\"This is the Pop Rest of the Members\",singleLine_content)\n        }\n    }\n\n    const artihmeticHandler = (singleLine_content) => {\n        return console.log(\"This is the Arthimetic Members\",singleLine_content);\n    }\n\n    const codeReplacer = (singleLine_content) => {\n        if(singleLine_content.startsWith(\"push\")){\n            pushHandler(singleLine_content);\n        }\n        else if(singleLine_content.startsWith(\"pop\")){\n            popHandler(singleLine_content);\n        }\n        else{\n            artihmeticHandler(singleLine_content);\n        }\n    }\n\n    content.map((item) =>{\n    console.log(\"This is the Assembly\",Assembly_code); \n        return codeReplacer(item)\n    }\n    );\n\n    return (\n        <div>\n            Yo Niggas\n        </div>\n    );\n}\n\nexport default Codewriter;"]},"metadata":{},"sourceType":"module"}