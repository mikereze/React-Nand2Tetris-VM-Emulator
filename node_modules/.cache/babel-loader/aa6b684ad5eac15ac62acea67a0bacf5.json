{"ast":null,"code":"var _jsxFileName = \"/home/mike/Documents/Assembler/src/App.js\";\nimport React from 'react';\nimport './App.css';\nimport { useState } from 'react';\nconst destination = {\n  null: \"000\",\n  M: \"001\",\n  D: \"010\",\n  MD: \"011\",\n  A: \"100\",\n  AM: \"101\",\n  AD: \"110\",\n  AMD: \"111\"\n};\nconst jump = {\n  null: \"000\",\n  JGT: \"001\",\n  JEQ: \"010\",\n  JGE: \"011\",\n  JLT: \"100\",\n  JNE: \"101\",\n  JLE: \"110\",\n  JMP: \"111\"\n};\nconst compare = [{\n  comparision: \"0\",\n  toBinary: \"0101010\"\n}, {\n  comparision: \"1\",\n  toBinary: \"0111111\"\n}, {\n  comparision: \"-1\",\n  toBinary: \"0111010\"\n}, {\n  comparision: \"D\",\n  toBinary: \"0001100\"\n}, {\n  comparision: \"A\",\n  toBinary: \"0110000\"\n}, {\n  comparision: \"M\",\n  toBinary: \"1110000\"\n}, {\n  comparision: \"!D\",\n  toBinary: \"0001101\"\n}, {\n  comparision: \"!A\",\n  toBinary: \"0110001\"\n}, {\n  comparision: \"!M\",\n  toBinary: \"1110001\"\n}, {\n  comparision: \"-D\",\n  toBinary: \"0001111\"\n}, {\n  comparision: \"-A\",\n  toBinary: \"0110011\"\n}, {\n  comparision: \"-M\",\n  toBinary: \"1110011\"\n}, {\n  comparision: \"D+1\",\n  toBinary: \"0011111\"\n}, {\n  comparision: \"A+1\",\n  toBinary: \"0110111\"\n}, {\n  comparision: \"M+1\",\n  toBinary: \"1110111\"\n}, {\n  comparision: \"D-1\",\n  toBinary: \"0001110\"\n}, {\n  comparision: \"A-1\",\n  toBinary: \"0110010\"\n}, {\n  comparision: \"D+A\",\n  toBinary: \"0000010\"\n}, {\n  comparision: \"D-A\",\n  toBinary: \"0010011\"\n}, {\n  comparision: \"A-D\",\n  toBinary: \"0000111\"\n}, {\n  comparision: \"D&A\",\n  toBinary: \"0000000\"\n}, {\n  comparision: \"D|A\",\n  toBinary: \"0010101\"\n}, {\n  comparision: \"M-1\",\n  toBinary: \"1110010\"\n}, {\n  comparision: \"D+M\",\n  toBinary: \"1000010\"\n}, {\n  comparision: \"D-M\",\n  toBinary: \"1010011\"\n}, {\n  comparision: \"M-D\",\n  toBinary: \"1000111\"\n}, {\n  comparision: \"D&M\",\n  toBinary: \"1000000\"\n}, {\n  comparision: \"D|M\",\n  toBinary: \"1010101\"\n}];\n\nconst ImportFromFileComponent = ({\n  handleFileChosen\n}) => {\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, \"Hello there you can load your assembly code\"), React.createElement(\"input\", {\n    type: \"file\",\n    accept: \".asm\",\n    onChange: e => handleFileChosen(e.target.files[0]),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }));\n};\n\nconst AfterLoad = ({\n  content\n}) => {\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, React.createElement(Cinstruction, {\n    content: content,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }));\n};\n\nconst Cinstruction = ({\n  content\n}) => {\n  const concatinator = (compBinary, destBinary, jumpBinary) => {\n    const convertedCinstruction = \"111\" + compBinary + destBinary + jumpBinary;\n    console.log(\"THis is the COnverted Value\", convertedCinstruction);\n    return convertedCinstruction;\n  };\n\n  for (var x = 0; x < content.length; x++) {\n    if (content[x].includes('=')) {\n      console.log(\"This is the List of the Contents\", content[x]);\n      let compBinary,\n          destBinary,\n          jumpBinary = \"\";\n      let jmp,\n          cmp,\n          dst = \"\";\n      var dst_cmp = content[x].split('=');\n      dst = dst_cmp[0].trim();\n\n      if (dst === null) {\n        destBinary = \"000\";\n      }\n\n      if (!dst_cmp[1].includes(\";\")) {\n        cmp = dst_cmp[1].trim();\n\n        if (jmp === undefined) {\n          jumpBinary = \"000\";\n        }\n      } else if (dst_cmp[1].includes(\";\")) {\n        var cmp_jmp = dst_cmp[1].split(\";\");\n        cmp = cmp_jmp[0].trim();\n        jmp = cmp_jmp[1].trim();\n      }\n\n      compare.map(item => {\n        if (item.comparision === cmp) {\n          compBinary = item.toBinary;\n        }\n\n        return \"compare\";\n      });\n\n      if (dst !== undefined) {\n        Object.keys(destination).map(item => {\n          if (item === dst) {\n            destBinary = destination[item];\n          }\n\n          return \"destination\";\n        });\n      }\n\n      if (jmp !== undefined) {\n        Object.keys(jump).map(item => {\n          if (item === jmp) {\n            jumpBinary = jump[item];\n          }\n\n          return \"jump\";\n        });\n      }\n\n      const convertedCinst = concatinator(compBinary, destBinary, jumpBinary);\n      content[x] = convertedCinst;\n    }\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }, React.createElement(Ainstruction, {\n    content: content,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }));\n};\n\nconst Ainstruction = ({\n  content\n}) => {\n  var regex = /@[0-9]/;\n\n  const digits_count = n => {\n    var count = 0;\n    if (n >= 0) ++count;\n\n    while (n / 10 >= 1) {\n      n /= 10;\n      ++count;\n    }\n\n    return count;\n  };\n\n  const decimaltoBinary = toBeBinary => {\n    const removedAt = toBeBinary.replace('@', '');\n    const converted = parseInt(removedAt, 10).toString(2);\n    const toBeFilled = 16 - digits_count(converted);\n    const filler = '0'.repeat(toBeFilled);\n    const binary = filler + converted;\n    return binary;\n  };\n\n  for (var x = 0; x < content.length; x++) {\n    if (regex.test(content[x])) {\n      const value = decimaltoBinary(content[x]);\n      content[x] = value;\n    }\n  }\n\n  console.log(\"THis is the Converted Full Version\", content);\n  return \"A instruction\";\n};\n\nconst App = () => {\n  let fileReader;\n  const [content, setContent] = useState(\" \");\n  const [loaded, setLoaded] = useState(false);\n\n  const handleFileRead = e => {\n    setLoaded(true);\n    setContent(() => fileReader.result.trim().split(\"\\n\"));\n  };\n\n  const handleFileChosen = file => {\n    fileReader = new FileReader();\n    fileReader.onloadend = handleFileRead;\n    fileReader.readAsText(file);\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209\n    },\n    __self: this\n  }, React.createElement(ImportFromFileComponent, {\n    handleFileChosen: handleFileChosen,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210\n    },\n    __self: this\n  }), loaded && React.createElement(AfterLoad, {\n    content: content,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211\n    },\n    __self: this\n  }));\n};\n\nexport default App;","map":{"version":3,"sources":["/home/mike/Documents/Assembler/src/App.js"],"names":["React","useState","destination","null","M","D","MD","A","AM","AD","AMD","jump","JGT","JEQ","JGE","JLT","JNE","JLE","JMP","compare","comparision","toBinary","ImportFromFileComponent","handleFileChosen","e","target","files","AfterLoad","content","Cinstruction","concatinator","compBinary","destBinary","jumpBinary","convertedCinstruction","console","log","x","length","includes","jmp","cmp","dst","dst_cmp","split","trim","undefined","cmp_jmp","map","item","Object","keys","convertedCinst","Ainstruction","regex","digits_count","n","count","decimaltoBinary","toBeBinary","removedAt","replace","converted","parseInt","toString","toBeFilled","filler","repeat","binary","test","value","App","fileReader","setContent","loaded","setLoaded","handleFileRead","result","file","FileReader","onloadend","readAsText"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\nimport {useState} from 'react';\n\nconst destination = \n    {\n     null  : \"000\",\n     M : \"001\",\n     D : \"010\" ,\n     MD  : \"011\",\n     A  : \"100\" ,\n     AM : \"101\" ,\n     AD : \"110\",\n     AMD  : \"111\" \n    }\nconst jump = {\n    null  : \"000\",\n    JGT : \"001\",\n    JEQ : \"010\" ,\n    JGE  : \"011\",\n    JLT  : \"100\" ,\n    JNE : \"101\" ,\n    JLE : \"110\",\n    JMP  : \"111\" \n}\n\nconst compare = [\n    { comparision: \"0\", toBinary: \"0101010\"},\n    { comparision: \"1\", toBinary: \"0111111\"},\n    { comparision: \"-1\", toBinary: \"0111010\"},\n    { comparision: \"D\", toBinary: \"0001100\"},\n    { comparision: \"A\", toBinary: \"0110000\"},\n    { comparision: \"M\", toBinary: \"1110000\"},\n    { comparision: \"!D\", toBinary: \"0001101\"},\n    { comparision: \"!A\", toBinary: \"0110001\"},\n    { comparision: \"!M\", toBinary: \"1110001\"},\n    { comparision: \"-D\", toBinary: \"0001111\"},\n    { comparision: \"-A\", toBinary: \"0110011\"},\n    { comparision: \"-M\", toBinary: \"1110011\"},\n    { comparision: \"D+1\", toBinary: \"0011111\"},\n    { comparision: \"A+1\", toBinary: \"0110111\"},\n    { comparision: \"M+1\", toBinary: \"1110111\"},\n    { comparision: \"D-1\", toBinary: \"0001110\"},\n    { comparision: \"A-1\", toBinary: \"0110010\"},\n    { comparision: \"D+A\", toBinary: \"0000010\"},\n    { comparision: \"D-A\", toBinary: \"0010011\"},\n    { comparision: \"A-D\", toBinary: \"0000111\"},\n    { comparision: \"D&A\", toBinary: \"0000000\"},\n    { comparision: \"D|A\", toBinary: \"0010101\"},\n    { comparision: \"M-1\", toBinary: \"1110010\"},\n    { comparision: \"D+M\", toBinary: \"1000010\"},\n    { comparision: \"D-M\", toBinary: \"1010011\"},\n    { comparision: \"M-D\", toBinary: \"1000111\"},\n    { comparision: \"D&M\", toBinary: \"1000000\"},\n    { comparision: \"D|M\", toBinary: \"1010101\"}\n]\n\nconst ImportFromFileComponent = ({handleFileChosen}) => {\n    return (\n        <div >\n        <p>Hello there you can load your assembly code</p>\n        <input type='file'\n                accept=\".asm\"\n                onChange={ (e) => handleFileChosen(e.target.files[0])}/>\n        </div>\n\n    );\n}\n\nconst AfterLoad = ({content}) => {\n    return (\n        <div>\n            <Cinstruction content={content}/>\n            \n        </div>\n\n    );\n}\n\nconst Cinstruction = ({content}) => {\n\n    const concatinator = (compBinary,destBinary,jumpBinary) => {\n        const convertedCinstruction = \"111\" + compBinary + destBinary + jumpBinary;\n        console.log(\"THis is the COnverted Value\",convertedCinstruction);\n        return convertedCinstruction;\n    }\n\n\n    for(var x=0;x<content.length;x++){\n        \n        if((content[x].includes('='))){\n            console.log(\"This is the List of the Contents\",content[x]);\n            let compBinary,destBinary,jumpBinary = \"\";\n            let jmp,cmp,dst = \"\";\n            var dst_cmp = content[x].split('=');\n                 dst = dst_cmp[0].trim();\n                 if(dst === null){\n                    destBinary = \"000\";\n                 }\n            if(!dst_cmp[1].includes(\";\")){\n                \n                 cmp = dst_cmp[1].trim();\n                 if(jmp === undefined){\n                    jumpBinary = \"000\";\n                }\n            }\n            else if(dst_cmp[1].includes(\";\")){\n                var cmp_jmp = dst_cmp[1].split(\";\");\n                 cmp = cmp_jmp[0].trim();\n                 jmp = cmp_jmp[1].trim();  \n            }\n\n\n            compare.map( (item) => {\n                if(item.comparision === cmp){\n                    compBinary =  item.toBinary;\n                }\n                return \"compare\";\n            }) \n\n            if(dst !== undefined){\n            Object.keys(destination).map((item) => {\n                    if(item === dst){\n                       destBinary = destination[item];\n                    }\n                    return \"destination\";\n            })\n            }\n\n            if(jmp !== undefined){\n                Object.keys(jump).map((item) => {\n                    if(item === jmp){\n                       jumpBinary = jump[item];\n                    }\n                    return \"jump\";\n            })\n            }\n            const convertedCinst = concatinator(compBinary,destBinary,jumpBinary);\n            content[x] = convertedCinst;\n        }\n\n    }\n    return (\n        <div>\n            <Ainstruction content={content}/>\n        </div>\n    );\n\n}\n\nconst Ainstruction = ({content}) => {\n\n    var regex = /@[0-9]/;\n\n    const digits_count = (n) => {\n        var count = 0;\n        if(n >= 0) ++count;\n        while (n/10 >= 1){\n            n/= 10;\n            ++count;\n        }\n        return count\n    }\n\n\n    const decimaltoBinary = (toBeBinary) => {\n        const removedAt = toBeBinary.replace('@','');\n        const converted = parseInt(removedAt,10).toString(2);\n        const toBeFilled = 16 - digits_count(converted);\n        const filler = '0'.repeat(toBeFilled);\n        const binary = filler + converted;\n        return binary;\n\n    }\n\n    \n    for(var x=0;x<content.length;x++){\n        if(regex.test(content[x])){\n            const value = decimaltoBinary(content[x]);\n            content[x] = value;\n        }\n    }\n    \n    console.log(\"THis is the Converted Full Version\",content);\n\n    return \"A instruction\"\n}\n\n\nconst App = () => {\n\n\n    let fileReader;\n    const [ content, setContent] = useState(\" \");\n    const [ loaded,  setLoaded] = useState(false);\n\n    const handleFileRead = (e) => {\n            setLoaded(true)\n            setContent(() => fileReader.result.trim().split(\"\\n\"));\n    }\n\n    const handleFileChosen = (file) => {\n            fileReader = new FileReader();\n            fileReader.onloadend = handleFileRead;\n            fileReader.readAsText(file);\n    }\n\n    return (\n        <div>\n        <ImportFromFileComponent handleFileChosen={handleFileChosen}/>\n        {loaded && <AfterLoad content={content}/>}\n        </div>\n    );\n  \n\n}\n\n\nexport default App;"]},"metadata":{},"sourceType":"module"}