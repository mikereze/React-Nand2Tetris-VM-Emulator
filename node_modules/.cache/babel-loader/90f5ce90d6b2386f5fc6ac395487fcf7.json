{"ast":null,"code":"var _jsxFileName = \"/home/mike/Documents/Assembler/src/Components/Symbols/Labelhandling.js\";\nimport Variablehandlng from './Variablehandlng';\n\nconst Labelhandling = ({\n  content\n}) => {\n  // const regLabel = /([A-Z])/;\n  let numberOfLabelsPassed = 0;\n  let content_updated = [];\n\n  const extractor = singleLine => {\n    const temp = singleLine.replace(\"(\", \"\");\n    const temp2 = temp.replace(\")\", \"\");\n    return temp2;\n  };\n\n  const addAndReplaceLabels = (singleLine_content, x, numberOfLabelsPassed) => {\n    symbols[singleLine_content] = x - numberOfLabelsPassed;\n    const tobeReturned = x - numberOfLabelsPassed;\n    return tobeReturned;\n  };\n\n  for (var x = 0; x < content.length; x++) {\n    // console.log(\"THis is are the Labels baby\",content[x])\n    if (content[x].includes('(')) {\n      const extracted = extractor(content[x]);\n      const toBeUpdated = \"@\" + addAndReplaceLabels(extracted, x, numberOfLabelsPassed);\n      numberOfLabelsPassed++;\n    } else if (!content[x].includes('(') && !content[x].includes(')')) {\n      content_updated.push(content[x]);\n    }\n  } // console.log(\"This is the Handled Label Bitches\",content_updated,symbols)\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(Variablehandlng, {\n    content: content_updated,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 6\n    }\n  }));\n};\n\nexport default Labelhandling;","map":{"version":3,"sources":["/home/mike/Documents/Assembler/src/Components/Symbols/Labelhandling.js"],"names":["Variablehandlng","Labelhandling","content","numberOfLabelsPassed","content_updated","extractor","singleLine","temp","replace","temp2","addAndReplaceLabels","singleLine_content","x","symbols","tobeReturned","length","includes","extracted","toBeUpdated","push"],"mappings":";AAAA,OAAOA,eAAP,MAA4B,mBAA5B;;AAGA,MAAMC,aAAa,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAe;AAGjC;AACA,MAAIC,oBAAoB,GAAG,CAA3B;AACA,MAAIC,eAAe,GAAG,EAAtB;;AAGC,QAAMC,SAAS,GAAIC,UAAD,IAAgB;AAC9B,UAAMC,IAAI,GAAGD,UAAU,CAACE,OAAX,CAAmB,GAAnB,EAAuB,EAAvB,CAAb;AACA,UAAMC,KAAK,GAAGF,IAAI,CAACC,OAAL,CAAa,GAAb,EAAiB,EAAjB,CAAd;AACA,WAAOC,KAAP;AACH,GAJD;;AAMA,QAAMC,mBAAmB,GAAG,CAACC,kBAAD,EAAoBC,CAApB,EAAsBT,oBAAtB,KAA+C;AACnEU,IAAAA,OAAO,CAACF,kBAAD,CAAP,GAA8BC,CAAC,GAACT,oBAAhC;AACA,UAAMW,YAAY,GAAIF,CAAC,GAAGT,oBAA1B;AACA,WAAOW,YAAP;AAEP,GALD;;AAOA,OAAI,IAAIF,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACV,OAAO,CAACa,MAAtB,EAA6BH,CAAC,EAA9B,EAAiC;AAC7B;AACH,QAAGV,OAAO,CAACU,CAAD,CAAP,CAAWI,QAAX,CAAoB,GAApB,CAAH,EAA4B;AAEzB,YAAMC,SAAS,GAAGZ,SAAS,CAACH,OAAO,CAACU,CAAD,CAAR,CAA3B;AACA,YAAMM,WAAW,GAAG,MAAMR,mBAAmB,CAACO,SAAD,EAAWL,CAAX,EAAaT,oBAAb,CAA7C;AACAA,MAAAA,oBAAoB;AACtB,KALD,MAMK,IAAG,CAACD,OAAO,CAACU,CAAD,CAAP,CAAWI,QAAX,CAAoB,GAApB,CAAD,IAA6B,CAACd,OAAO,CAACU,CAAD,CAAP,CAAWI,QAAX,CAAoB,GAApB,CAAjC,EAA0D;AAC3DZ,MAAAA,eAAe,CAACe,IAAhB,CAAqBjB,OAAO,CAACU,CAAD,CAA5B;AACH;AACL,GAhCmC,CAiCpC;;;AACA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA,oBAAC,eAAD;AAAiB,IAAA,OAAO,EAAGR,eAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,CADJ;AAKC,CAvCF;;AAyCC,eAAeH,aAAf","sourcesContent":["import Variablehandlng from './Variablehandlng';\n\n\nconst Labelhandling = ({content}) => {\n\n\n    // const regLabel = /([A-Z])/;\n    let numberOfLabelsPassed = 0;\n    let content_updated = [];\n \n \n     const extractor = (singleLine) => {\n         const temp = singleLine.replace(\"(\",\"\");\n         const temp2 = temp.replace(\")\",\"\");\n         return temp2;\n     }\n \n     const addAndReplaceLabels = (singleLine_content,x,numberOfLabelsPassed) => {\n             symbols[singleLine_content] = x-numberOfLabelsPassed;\n             const tobeReturned =  x - numberOfLabelsPassed;\n             return tobeReturned;\n             \n     }\n \n     for(var x=0;x<content.length;x++){\n         // console.log(\"THis is are the Labels baby\",content[x])\n      if(content[x].includes('(')){\n        \n         const extracted = extractor(content[x]);\n         const toBeUpdated = \"@\" + addAndReplaceLabels(extracted,x,numberOfLabelsPassed);\n         numberOfLabelsPassed++;\n      }\n      else if(!content[x].includes('(') && !content[x].includes(')')){\n          content_updated.push(content[x]);\n      }\n }  \n // console.log(\"This is the Handled Label Bitches\",content_updated,symbols)\n return (\n     <div>\n     <Variablehandlng content= {content_updated}/>\n     </div>\n );\n }\n\n export default Labelhandling;"]},"metadata":{},"sourceType":"module"}