{"ast":null,"code":"var _jsxFileName = \"/home/mike/Documents/Assembler/src/App.js\";\nimport React from 'react';\nimport './App.css';\nimport { useState } from 'react';\n\nconst ImportFromFileComponent = ({\n  handleFileChosen\n}) => {\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  }, \"Hello there you can load your assembly code\"), React.createElement(\"input\", {\n    type: \"file\",\n    accept: \".asm\",\n    onChange: e => handleFileChosen(e.target.files[0]),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  }));\n};\n\nconst AfterLoad = ({\n  content\n}) => {\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, React.createElement(Ainstruction, {\n    content: content,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }));\n};\n\nconst Cinstruction = ({\n  content\n}) => {\n  for (var x = 0; x < content.length; x++) {\n    if (content[x].includes('=')) {\n      var dst_cmp = content[x].split('=');\n      console.log(\"This is the Destinaction One\", dst_cmp[0]);\n      console.log(\"This is the Compare and Jump(if exist) One\", dst_cmp[1]);\n\n      if (dst_cmp[1].includes(\";\")) {\n        var cmp_jmp = dst_cmp.split(\";\");\n        console.log(\"This is Compare\", cmp_jmp[0]);\n        console.log(\"This is Jump\", cmp_jmp[1]);\n      }\n    }\n  }\n\n  return \"c instruction\";\n};\n\nconst Ainstruction = ({\n  content\n}) => {\n  var regex = /@[0-9]/;\n\n  const digits_count = n => {\n    var count = 0;\n    if (n >= 0) ++count;\n\n    while (n / 10 >= 1) {\n      n /= 10;\n      ++count;\n    }\n\n    return count;\n  };\n\n  const decimaltoBinary = toBeBinary => {\n    const removedAt = toBeBinary.replace('@', '');\n    const converted = parseInt(removedAt, 10).toString(2);\n    const toBeFilled = 16 - digits_count(converted);\n    const filler = '0'.repeat(toBeFilled);\n    const binary = filler + converted;\n    return binary;\n  };\n\n  for (var x = 0; x < content.length; x++) {\n    if (regex.test(content[x])) {\n      const value = decimaltoBinary(content[x]);\n      content[x] = value;\n    }\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, React.createElement(Cinstruction, {\n    content: content,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }));\n};\n\nconst App = () => {\n  let fileReader;\n  const [content, setContent] = useState(\" \");\n  const [loaded, setLoaded] = useState(false);\n\n  const handleFileRead = e => {\n    setLoaded(true);\n    setContent(() => fileReader.result.trim().split(\"\\n\"));\n  };\n\n  const handleFileChosen = file => {\n    fileReader = new FileReader();\n    fileReader.onloadend = handleFileRead;\n    fileReader.readAsText(file);\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, React.createElement(ImportFromFileComponent, {\n    handleFileChosen: handleFileChosen,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }), loaded && React.createElement(AfterLoad, {\n    content: content,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }));\n};\n\nexport default App;","map":{"version":3,"sources":["/home/mike/Documents/Assembler/src/App.js"],"names":["React","useState","ImportFromFileComponent","handleFileChosen","e","target","files","AfterLoad","content","Cinstruction","x","length","includes","dst_cmp","split","console","log","cmp_jmp","Ainstruction","regex","digits_count","n","count","decimaltoBinary","toBeBinary","removedAt","replace","converted","parseInt","toString","toBeFilled","filler","repeat","binary","test","value","App","fileReader","setContent","loaded","setLoaded","handleFileRead","result","trim","file","FileReader","onloadend","readAsText"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\nimport {useState} from 'react';\n\n\nconst ImportFromFileComponent = ({handleFileChosen}) => {\n    return (\n        <div >\n        <p>Hello there you can load your assembly code</p>\n        <input type='file'\n                accept=\".asm\"\n                onChange={ (e) => handleFileChosen(e.target.files[0])}/>\n        </div>\n\n    );\n}\n\nconst AfterLoad = ({content}) => {\n    return (\n        <div>\n            <Ainstruction content={content}/>\n            \n        </div>\n\n    );\n}\n\nconst Cinstruction = ({content}) => {\n    for(var x=0;x<content.length;x++){\n        if(content[x].includes('=')){\n            var dst_cmp = content[x].split('=');\n            console.log(\"This is the Destinaction One\",dst_cmp[0]);\n            console.log(\"This is the Compare and Jump(if exist) One\",dst_cmp[1])\n            if(dst_cmp[1].includes(\";\")){\n                var cmp_jmp = dst_cmp.split(\";\");\n                console.log(\"This is Compare\", cmp_jmp[0]);\n                console.log(\"This is Jump\",cmp_jmp[1]);\n            }\n        }\n\n    }\n    return \"c instruction\";\n\n}\n\nconst Ainstruction = ({content}) => {\n\n    var regex = /@[0-9]/;\n\n    const digits_count = (n) => {\n        var count = 0;\n        if(n >= 0) ++count;\n        while (n/10 >= 1){\n            n/= 10;\n            ++count;\n        }\n        return count\n    }\n\n\n    const decimaltoBinary = (toBeBinary) => {\n        const removedAt = toBeBinary.replace('@','');\n        const converted = parseInt(removedAt,10).toString(2);\n        const toBeFilled = 16 - digits_count(converted);\n        const filler = '0'.repeat(toBeFilled);\n        const binary = filler + converted;\n        return binary;\n\n    }\n\n    \n    for(var x=0;x<content.length;x++){\n        if(regex.test(content[x])){\n            const value = decimaltoBinary(content[x]);\n            content[x] = value;\n        }\n    }\n    \n\n\n    return (\n        <div>\n            <Cinstruction content={content}/>\n        </div>\n    ); \n}\n\n\nconst App = () => {\n\n\n    let fileReader;\n    const [ content, setContent] = useState(\" \");\n    const [ loaded,  setLoaded] = useState(false);\n\n    const handleFileRead = (e) => {\n            setLoaded(true)\n            setContent(() => fileReader.result.trim().split(\"\\n\"));\n    }\n\n    const handleFileChosen = (file) => {\n            fileReader = new FileReader();\n            fileReader.onloadend = handleFileRead;\n            fileReader.readAsText(file);\n    }\n\n    return (\n        <div>\n        <ImportFromFileComponent handleFileChosen={handleFileChosen}/>\n        {loaded && <AfterLoad content={content}/>}\n        </div>\n    );\n  \n\n}\n\n\nexport default App;"]},"metadata":{},"sourceType":"module"}