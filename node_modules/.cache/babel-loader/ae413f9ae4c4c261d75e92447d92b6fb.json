{"ast":null,"code":"var _jsxFileName = \"/home/mike/Documents/Assembler/src/Components/Cinstruction.js\";\nimport ConvertToFile from './ConvertToFile';\n\nconst Cinstruction = ({\n  content\n}) => {\n  const separator = singleLine => {\n    let jmp,\n        cmp,\n        dst = \"\";\n\n    if (singleLine.includes('=')) {\n      var dst_cmp = singleLine.split('=');\n      dst = dst_cmp[0];\n\n      if (!dst_cmp[1].includes(\";\")) {\n        cmp = dst_cmp[1].trim();\n      } else if (dst_cmp[1].includes(\";\")) {\n        // if(!singleLine.includes('=')){\n        //     cmp = dst_cmp[0];\n        // }\n        var cmp_jmp = dst_cmp[1].split(\";\");\n        cmp = cmp_jmp[0].trim();\n        jmp = cmp_jmp[1].trim();\n      }\n    } else {\n      if (singleLine.includes(\";\")) {\n        cmp_jmp = singleLine.split(\";\");\n        cmp = cmp_jmp[0].trim();\n        jmp = cmp_jmp[1].trim();\n      }\n    }\n\n    const separated = [cmp, dst, jmp];\n    return separated;\n  };\n\n  const binaryConverter = arrayOfSeparated => {\n    let compBinary = \"\";\n    let destBinary = \"000\";\n    let jumpBinary = \"000\";\n    let cmp = arrayOfSeparated[0];\n    let dst = arrayOfSeparated[1];\n    let jmp = arrayOfSeparated[2];\n    compare.map(item => {\n      if (item.comparision === cmp) {\n        compBinary = item.toBinary;\n      }\n\n      return \"compare\";\n    });\n\n    if (dst !== undefined) {\n      Object.keys(destination).map(item => {\n        if (item === dst) {\n          destBinary = destination[item];\n        }\n\n        return \"destination\";\n      });\n    }\n\n    if (jmp !== undefined) {\n      Object.keys(jump).map(item => {\n        if (item === jmp) {\n          jumpBinary = jump[item];\n        }\n\n        return \"jump\";\n      });\n    }\n\n    const convertedBinaryCinst = [compBinary, destBinary, jumpBinary];\n    return convertedBinaryCinst;\n  };\n\n  const concatinator = convertedCinst => {\n    const convertedCinstruction = \"111\" + convertedCinst[0] + convertedCinst[1] + convertedCinst[2];\n    return convertedCinstruction;\n  };\n\n  for (var x = 0; x < content.length; x++) {\n    if (content[x].includes('=') || content[x].includes(';')) {\n      const arrayOfSeparated = separator(content[x]);\n      const convertedCinst = binaryConverter(arrayOfSeparated);\n      content[x] = concatinator(convertedCinst);\n    }\n  }\n\n  console.log(content);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ConvertToFile, {\n    content: content,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default Cinstruction;","map":{"version":3,"sources":["/home/mike/Documents/Assembler/src/Components/Cinstruction.js"],"names":["ConvertToFile","Cinstruction","content","separator","singleLine","jmp","cmp","dst","includes","dst_cmp","split","trim","cmp_jmp","separated","binaryConverter","arrayOfSeparated","compBinary","destBinary","jumpBinary","compare","map","item","comparision","toBinary","undefined","Object","keys","destination","jump","convertedBinaryCinst","concatinator","convertedCinst","convertedCinstruction","x","length","console","log"],"mappings":"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","sourcesContent":["import ConvertToFile from './ConvertToFile';\n\nconst Cinstruction = ({content}) => {\n\n    const separator = (singleLine) => {\n        let jmp,cmp,dst = \"\";\n        if(singleLine.includes('=')){\n            var dst_cmp = singleLine.split('=');\n            dst = dst_cmp[0];\n\n            if(!dst_cmp[1].includes(\";\")){\n                cmp = dst_cmp[1].trim();\n            }\n            else if(dst_cmp[1].includes(\";\")){\n                // if(!singleLine.includes('=')){\n                //     cmp = dst_cmp[0];\n                // }\n               \n                    var cmp_jmp = dst_cmp[1].split(\";\");\n                    cmp = cmp_jmp[0].trim();\n                    jmp = cmp_jmp[1].trim();  \n                \n    \n            }\n         }\n         else{\n             if(singleLine.includes(\";\")){\n                cmp_jmp = singleLine.split(\";\")\n                cmp = cmp_jmp[0].trim();\n                jmp = cmp_jmp[1].trim();\n             }\n         }\n\n       \n        const separated = [cmp,dst,jmp]\n        return separated;\n    }\n\n    const binaryConverter = (arrayOfSeparated) => {\n\n            let compBinary = \"\";\n            let destBinary = \"000\";\n            let jumpBinary = \"000\";\n            let cmp = arrayOfSeparated[0];\n            let dst = arrayOfSeparated[1];\n            let jmp = arrayOfSeparated[2];\n            \n            compare.map( (item) => {\n                if(item.comparision === cmp){\n                    compBinary =  item.toBinary;\n                }\n                return \"compare\";\n            }) \n\n            if(dst !== undefined){\n            Object.keys(destination).map((item) => {\n                    if(item === dst){\n                    destBinary = destination[item];\n                    }\n                    return \"destination\";\n            })\n            }\n\n            if(jmp !== undefined){\n                Object.keys(jump).map((item) => {\n                    if(item === jmp){\n                    jumpBinary = jump[item];\n                    }\n                    return \"jump\";\n            })\n            }\n            const convertedBinaryCinst = [compBinary,destBinary,jumpBinary]\n            return convertedBinaryCinst;\n    }\n\n    const concatinator = (convertedCinst) => {\n        const convertedCinstruction = \"111\" + convertedCinst[0] + convertedCinst[1] + convertedCinst[2];\n        return convertedCinstruction;\n    }\n\n    for(var x=0;x<content.length;x++){\n        if(content[x].includes('=') || content[x].includes(';')){\n\n            const arrayOfSeparated = separator(content[x]);\n            const convertedCinst = binaryConverter(arrayOfSeparated);\n            content[x] = concatinator(convertedCinst);\n        }\n    }\n    console.log(content);\n    return (\n        <div>\n            <ConvertToFile content={content}/>\n        </div>\n    );\n\n}\n\nexport default Cinstruction;"]},"metadata":{},"sourceType":"module"}