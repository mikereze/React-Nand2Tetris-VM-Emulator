{"ast":null,"code":"var _jsxFileName = \"/home/mike/Documents/Nand2Tetris React Projects/VM Translator/src/Components/Codewriter.js\";\nimport React from 'react';\nimport ConvertToFile from './ConvertToFile';\n\nconst Codewriter = ({\n  content\n}) => {\n  let Assembly_code = [];\n  const mappingObj = {\n    local: \"LCL\",\n    argument: \"ARG\",\n    this: \"THIS\",\n    that: \"THAT\",\n    temp: \"5\"\n  };\n\n  const pushHandler = singleLine => {\n    const singleLine_content = singleLine.replace(\"push\", \"\");\n\n    if (singleLine_content.includes(\"constant\")) {\n      const temp = singleLine_content.replace(\"constant\", \"\");\n      const singleLine_constant = temp.trim();\n      const tobePushed = \"@\" + singleLine_constant;\n      let comment = \"// push\" + singleLine_content;\n      const constant_arr = [comment, tobePushed, \"D=A\", \"@SP\", \"A=M\", \"M=D\", \"@SP\", \"M=M+1\"];\n      Assembly_code = [...Assembly_code, ...constant_arr];\n      return Assembly_code;\n    } else if (singleLine_content.includes(\"pointer\")) {\n      const temp = singleLine_content.replace(\"pointer\", \"\");\n      const singleLine_pointer = temp.trim();\n      let tobePushed;\n\n      if (singleLine_pointer === \"0\") {\n        tobePushed = \"@THIS\";\n        console.log(\"This is the This keyword\");\n      } else if (singleLine_pointer === \"1\") {\n        tobePushed = \"@THAT\";\n        console.log(\"This is the That keyword\");\n      }\n\n      let comment = \"// push\" + singleLine_content;\n      const constant_arr = [comment, tobePushed, \"D=M\", \"@SP\", \"A=M\", \"M=D\", \"@SP\", \"M=M+1\"];\n      Assembly_code = [...Assembly_code, ...constant_arr];\n      return Assembly_code;\n    } else if (singleLine_content.includes(\"static\")) {\n      let tobeSplitted = singleLine_content.trim();\n      let splitted_static = tobeSplitted.split(\" \");\n      const comment = \"//push\" + singleLine_content;\n      let static_variable = \"@vm.\" + splitted_static[1];\n      const static_arr = [comment, static_variable, \"D=M\", \"@SP\", \"A=M\", \"M=D\", \"@SP\", \"M=M+1\"];\n      Assembly_code = [...Assembly_code, ...static_arr];\n      return Assembly_code;\n    } else {\n      const tobeSeparated = singleLine_content.trim();\n      const segments = tobeSeparated.split(\" \");\n      const firstValue = \"@\" + segments[1];\n      let nextValue = \"\";\n      let tempidentified = \"\";\n\n      if (Object.keys(mappingObj).includes(segments[0])) {\n        nextValue = \"@\" + mappingObj[segments[0]];\n\n        if (segments[0] === \"temp\") {\n          tempidentified = \"A=A+D\";\n        } else {\n          tempidentified = \"A=M+D\";\n        }\n      }\n\n      let comment = \"// push\" + singleLine_content;\n      const segmentArr = [comment, firstValue, \"D=A\", nextValue, tempidentified, \"D=M\", \"@SP\", \"A=M\", \"M=D\", \"@SP\", \"M=M+1\"];\n      Assembly_code = [...Assembly_code, ...segmentArr];\n      return Assembly_code;\n    }\n  };\n\n  const popHandler = singleLine => {\n    const singleLine_content = singleLine.replace(\"pop\", \"\");\n\n    if (singleLine_content.includes(\"pointer\")) {\n      const temp = singleLine_content.replace(\"pointer\", \"\");\n      const singleLine_pointer = temp.trim();\n      let tobeAdded;\n\n      if (singleLine_pointer === \"0\") {\n        tobeAdded = \"@THIS\";\n        console.log(\"This is the This keyword\");\n      } else if (singleLine_pointer === \"1\") {\n        tobeAdded = \"@THAT\";\n        console.log(\"This is the That keyword\");\n      }\n\n      let comment = \"// pop\" + singleLine_content;\n      const pointerArr = [comment, \"@SP\", \"M=M-1\", \"@SP\", \"A=M\", \"D=M\", tobeAdded, \"M=D\"];\n      Assembly_code = [...Assembly_code, ...pointerArr];\n      return Assembly_code;\n    } else if (singleLine_content.includes(\"static\")) {\n      let tobeSplitted = singleLine_content.trim();\n      let splitted_static = tobeSplitted.split(\" \");\n      const comment = \"//pop\" + singleLine_content;\n      let static_variable = \"@vm.\" + splitted_static[1];\n      const static_arr = [comment, \"@SP\", \"M=M-1\", \"@SP\", \"A=M\", \"D=M\", static_variable, \"M=D\"];\n      Assembly_code = [...Assembly_code, ...static_arr];\n      return Assembly_code;\n    } else {\n      const tobeSeparated_Pop = singleLine_content.trim();\n      const segments_pop = tobeSeparated_Pop.split(\" \");\n      const first_pop = \"@\" + segments_pop[1];\n      let next_pop = \"\";\n      let tempidentified = \"\";\n      let comment = \"// pop\" + singleLine_content;\n\n      if (Object.keys(mappingObj).includes(segments_pop[0])) {\n        next_pop = \"@\" + mappingObj[segments_pop[0]];\n\n        if (segments_pop[0] === \"temp\") {\n          tempidentified = \"D=D+A\";\n        } else {\n          tempidentified = \"D=D+M\";\n        }\n      }\n\n      const segment_pop_arr = [comment, first_pop, \"D=A\", next_pop, tempidentified, \"@R13\", \"M=D\", \"@SP\", \"M=M-1\", \"@SP\", \"A=M\", \"D=M\", \"@R13\", \"A=M\", \"M=D\"];\n      Assembly_code = [...Assembly_code, ...segment_pop_arr];\n      return Assembly_code;\n    }\n  };\n\n  const gotoHandler = singleLine => {\n    const comment = \"//\" + singleLine;\n    const singleLine_content = singleLine.replace(\"goto\", \"\");\n    const goto_arr = [comment, \"@\" + singleLine_content.trim(), \"0;JMP\"];\n    Assembly_code = [...Assembly_code, ...goto_arr];\n    return Assembly_code;\n  };\n\n  const if_gotoHandler = singleLine => {\n    const comment = \"//\" + singleLine;\n    const singleLine_content = singleLine.replace(\"if-goto\", \"\");\n    const label = \"@\" + singleLine_content.trim();\n    const if_goto_arr = [comment, \"@SP\", \"M=M-1\", \"@SP\", \"A=M\", \"D=M\", label, \"D;JNE\"];\n    Assembly_code = [...Assembly_code, ...if_goto_arr];\n    return Assembly_code;\n  };\n\n  const labelHandler = singleLine => {\n    const comment = \"//\" + singleLine;\n    const singleLine_content = singleLine.replace(\"label\", \"\");\n    const label_arr = [comment, \"(\" + singleLine_content.trim() + \")\"];\n    Assembly_code = [...Assembly_code, ...label_arr];\n    return Assembly_code;\n  };\n\n  const callHandler = singleLine => {\n    const comment = \"//\" + singleLine;\n    const singleLine_content = singleLine.replace(\"call\", \"\").trim();\n    const name_arg = singleLine_content.split(\" \");\n    const labelDeclaration = \"(returnaddress)\";\n    const labelReference = \"@returnaddress\";\n    const nargs = \"@\" + name_arg[1];\n    const functionName = \"@\" + name_arg[0];\n    const call_arr = [comment, labelReference, \"D=A\", \"@SP\", \"A=M\", \"M=D\", \"@SP\", \"M=M+1\", \"@LCL\", \"D=M\", \"@SP\", \"A=M\", \"M=D\", \"@SP\", \"M=M+1\", \"@ARG\", \"D=M\", \"@SP\", \"A=M\", \"M=D\", \"@SP\", \"M=M+1\", \"@THIS\", \"D=M\", \"@SP\", \"A=M\", \"M=D\", \"@SP\", \"M=M+1\", \"@THAT\", \"D=M\", \"@SP\", \"A=M\", \"M=D\", \"@SP\", \"M=M+1\", \"@SP\", \"D=M\", \"@5\", \"D=D-A\", nargs, \"D=D-A\", \"@ARG\", \"M=D\", \"@SP\", \"D=M\", \"@LCL\", \"M=D\", functionName, \"0;JMP\", labelDeclaration];\n    Assembly_code = [...Assembly_code, ...call_arr];\n    return Assembly_code;\n  };\n\n  const functionHandler = singleLine => {\n    const comment = \"//\" + singleLine;\n    const singleLine_content = singleLine.replace(\"function\", \"\").trim();\n    const name_nargs = singleLine_content.split(\" \");\n    const functionName = \"(\" + name_nargs[0] + \")\";\n    const nargs = parseInt(name_nargs[1]);\n    const nargs_array = [];\n    new Array(nargs).fill(1).map(() => {\n      nargs_array.push(\"@0\", \"D=A\", \"@SP\", \"A=M\", \"M=D\", \"@SP\", \"M=M+1\");\n    });\n    console.log(\"This is the function\", nargs);\n    const function_arr = [comment, functionName, ...nargs_array];\n    Assembly_code = [...Assembly_code, ...function_arr];\n    return Assembly_code;\n  };\n\n  const returnHandler = singleLine => {\n    const comment = \"//\" + singleLine;\n    const return_arr = [comment, \"@LCL\", \"D=M\", \"@R13\", \"M=D\", \"@5\", \"D=A\", \"@R13\", \"A=M-D\", \"D=M\", \"@R14\", \"M=D\", \"@SP\", \"M=M-1\", \"@SP\", \"A=M\", \"D=M\", \"@ARG\", \"A=M\", \"M=D\", \"@ARG\", \"D=M\", \"@SP\", \"M=D+1\", \"@R13\", \"A=M-1\", \"D=M\", \"@THAT\", \"M=D\", \"@2\", \"D=A\", \"@R13\", \"A=M-D\", \"D=M\", \"@THIS\", \"M=D\", \"@3\", \"D=A\", \"@R13\", \"A=M-D\", \"D=M\", \"@ARG\", \"M=D\", \"@4\", \"D=A\", \"@R13\", \"A=M-D\", \"D=M\", \"@LCL\", \"M=D\", \"@R14\", \"D=M\", \"D;JMP\"];\n    Assembly_code = [...Assembly_code, ...return_arr];\n    return Assembly_code;\n  };\n\n  const artihmeticHandler = singleLine_content => {\n    let mainSegment = \"\";\n    let athArr;\n\n    if (singleLine_content === \"neg\" || singleLine_content === \"not\") {\n      let comment = \"//\" + singleLine_content;\n\n      if (singleLine_content === \"neg\") {\n        athArr = [comment, \"@SP\", \"M=M-1\", \"@SP\", \"A=M\", \"M=-M\", \"@SP\", \"M=M+1\"];\n      } else if (singleLine_content === \"not\") {\n        athArr = [comment, \"@SP\", \"M=M-1\", \"@SP\", \"A=M\", \"M=!M\", \"@SP\", \"M=M+1\"];\n      }\n    } else if (singleLine_content === \"gt\") {\n      let num = Math.floor(Math.random() * 10);\n      let gt_var = \"@CHECKGT.\" + num;\n      let gt_label = \"(CHECKGT.\" + num + \")\";\n      let prev_var = \"@PREVIEWGT.\" + num;\n      let prev_label = \"(PREVIEWGT.\" + num + \")\";\n      let comment = \"//\" + singleLine_content;\n      athArr = [comment, \"@SP\", \"M=M-1\", \"@SP\", \"A=M\", \"D=M\", \"@SP\", \"M=M-1\", \"@SP\", \"A=M\", \"D=M-D\", gt_var, \"D;JGT\", \"D=0\", prev_var, \"0;JMP\", gt_label, \"D=-1\", prev_label, \"@SP\", \"A=M\", \"M=D\", \"@SP\", \"M=M+1\"];\n    } else if (singleLine_content === \"lt\") {\n      let num = Math.floor(Math.random() * 10);\n      let lt_var = \"@CHECKLT.\" + num;\n      let lt_label = \"(CHECKLT.\" + num + \")\";\n      let prev_var = \"@PREVIEWLT.\" + num;\n      let prev_label = \"(PREVIEWLT.\" + num + \")\";\n      let comment = \"//\" + singleLine_content;\n      athArr = [comment, \"@SP\", \"M=M-1\", \"@SP\", \"A=M\", \"D=M\", \"@SP\", \"M=M-1\", \"@SP\", \"A=M\", \"D=M-D\", lt_var, \"D;JLT\", \"D=0\", prev_var, \"0;JMP\", lt_label, \"D=-1\", prev_label, \"@SP\", \"A=M\", \"M=D\", \"@SP\", \"M=M+1\"];\n    } else if (singleLine_content === \"eq\") {\n      let num = Math.floor(Math.random() * 10);\n      let eq_var = \"@CHECKEQ.\" + num;\n      let eq_label = \"(CHECKEQ.\" + num + \")\";\n      let prev_var = \"@PREVIEWEQ.\" + num;\n      let prev_label = \"(PREVIEWEQ.\" + num + \")\";\n      let comment = \"//\" + singleLine_content;\n      athArr = [comment, \"@SP\", \"M=M-1\", \"@SP\", \"A=M\", \"D=M\", \"@SP\", \"M=M-1\", \"@SP\", \"A=M\", \"D=M-D\", eq_var, \"D;JEQ\", \"D=0\", prev_var, \"0;JMP\", eq_label, \"D=-1\", prev_label, \"@SP\", \"A=M\", \"M=D\", \"@SP\", \"M=M+1\"];\n    } else {\n      if (singleLine_content === \"add\") {\n        mainSegment = \"D=M+D\";\n      } else if (singleLine_content === \"sub\") {\n        mainSegment = \"D=M-D\";\n      } else if (singleLine_content === \"and\") {\n        mainSegment = \"D=M&D\";\n      } else if (singleLine_content === \"or\") {\n        mainSegment = \"D=M|D\";\n      }\n\n      let comment = \"//\" + singleLine_content;\n      athArr = [comment, \"@SP\", \"M=M-1\", \"@SP\", \"A=M\", \"D=M\", \"@SP\", \"M=M-1\", \"@SP\", \"A=M\", mainSegment, \"@SP\", \"A=M\", \"M=D\", \"@SP\", \"M=M+1\"];\n    }\n\n    Assembly_code = [...Assembly_code, ...athArr];\n    return Assembly_code;\n  };\n\n  const codeReplacer = singleLine_content => {\n    if (singleLine_content.startsWith(\"push\")) {\n      pushHandler(singleLine_content);\n    } else if (singleLine_content.startsWith(\"pop\")) {\n      popHandler(singleLine_content);\n    } else if (singleLine_content.startsWith(\"goto\")) {\n      gotoHandler(singleLine_content);\n    } else if (singleLine_content.startsWith(\"label\")) {\n      labelHandler(singleLine_content);\n    } else if (singleLine_content.startsWith(\"if-goto\")) {\n      if_gotoHandler(singleLine_content);\n    } else if (singleLine_content.startsWith(\"call\")) {\n      callHandler(singleLine_content);\n    } else if (singleLine_content.startsWith(\"function\")) {\n      functionHandler(singleLine_content);\n    } else if (singleLine_content.startsWith(\"return\")) {\n      returnHandler(singleLine_content);\n    } else {\n      artihmeticHandler(singleLine_content);\n    }\n  };\n\n  content.map(item => {\n    return codeReplacer(item);\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ConvertToFile, {\n    content: Assembly_code,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default Codewriter;","map":{"version":3,"sources":["/home/mike/Documents/Nand2Tetris React Projects/VM Translator/src/Components/Codewriter.js"],"names":["React","ConvertToFile","Codewriter","content","Assembly_code","mappingObj","local","argument","this","that","temp","pushHandler","singleLine","singleLine_content","replace","includes","singleLine_constant","trim","tobePushed","comment","constant_arr","singleLine_pointer","console","log","tobeSplitted","splitted_static","split","static_variable","static_arr","tobeSeparated","segments","firstValue","nextValue","tempidentified","Object","keys","segmentArr","popHandler","tobeAdded","pointerArr","tobeSeparated_Pop","segments_pop","first_pop","next_pop","segment_pop_arr","gotoHandler","goto_arr","if_gotoHandler","label","if_goto_arr","labelHandler","label_arr","callHandler","name_arg","labelDeclaration","labelReference","nargs","functionName","call_arr","functionHandler","name_nargs","parseInt","nargs_array","Array","fill","map","push","function_arr","returnHandler","return_arr","artihmeticHandler","mainSegment","athArr","num","Math","floor","random","gt_var","gt_label","prev_var","prev_label","lt_var","lt_label","eq_var","eq_label","codeReplacer","startsWith","item"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ConvertToFile from './ConvertToFile';\n\nconst Codewriter = ({content}) => {\n\n    let Assembly_code = [];\n    const mappingObj = { local : \"LCL\",argument : \"ARG\", this: \"THIS\",that: \"THAT\",temp : \"5\"};\n\n\n    const pushHandler = (singleLine) => {\n        const singleLine_content = singleLine.replace(\"push\",\"\");\n        if(singleLine_content.includes(\"constant\")){\n            const temp = singleLine_content.replace(\"constant\",\"\");\n            const singleLine_constant = temp.trim();\n            const tobePushed = \"@\" + singleLine_constant;\n            let comment = \"// push\" + singleLine_content;\n\n            const constant_arr = [comment,tobePushed,\"D=A\",\"@SP\",\"A=M\",\"M=D\",\"@SP\",\"M=M+1\"];\n            Assembly_code = [...Assembly_code,...constant_arr];\n            return Assembly_code;\n        }\n        else if(singleLine_content.includes(\"pointer\")){\n            const temp = singleLine_content.replace(\"pointer\",\"\");\n            const singleLine_pointer = temp.trim();\n            let tobePushed;\n            if(singleLine_pointer === \"0\"){\n                tobePushed  = \"@THIS\";\n                console.log(\"This is the This keyword\");\n            }\n            else if(singleLine_pointer === \"1\"){\n                tobePushed  = \"@THAT\";\n                console.log(\"This is the That keyword\");\n\n            }\n            let comment = \"// push\" + singleLine_content;\n\n            const constant_arr = [comment,tobePushed,\"D=M\",\"@SP\",\"A=M\",\"M=D\",\"@SP\",\"M=M+1\"];\n            Assembly_code = [...Assembly_code,...constant_arr];\n            return Assembly_code;\n        }\n        else if(singleLine_content.includes(\"static\")){\n            let tobeSplitted = singleLine_content.trim();\n            let splitted_static =  tobeSplitted.split(\" \");\n            const comment = \"//push\" + singleLine_content;\n            let static_variable = \"@vm.\" + splitted_static[1];\n            const static_arr = [comment,static_variable,\"D=M\",\"@SP\",\"A=M\",\"M=D\",\"@SP\",\"M=M+1\"];\n            Assembly_code = [...Assembly_code,...static_arr]\n            return Assembly_code\n        }\n        else{\n            const tobeSeparated = singleLine_content.trim();\n            const segments = tobeSeparated.split(\" \");\n            const firstValue = \"@\" +segments[1];\n            let nextValue = \"\";\n            let tempidentified = \"\";\n            if(Object.keys(mappingObj).includes(segments[0])){\n                    nextValue = \"@\" + mappingObj[segments[0]]\n                    if(segments[0] === \"temp\"){\n                        tempidentified = \"A=A+D\"\n                    }\n                    else{\n                        tempidentified = \"A=M+D\"\n    \n                    }\n            }\n            let comment = \"// push\" + singleLine_content;\n            const segmentArr = [comment,firstValue,\"D=A\",nextValue,tempidentified,\"D=M\",\"@SP\",\"A=M\",\"M=D\",\"@SP\",\"M=M+1\"]\n            Assembly_code = [...Assembly_code,...segmentArr]\n            return Assembly_code \n        }\n    }\n\n\n    const popHandler = (singleLine) => {\n        const singleLine_content = singleLine.replace(\"pop\",\"\");\n        if(singleLine_content.includes(\"pointer\")){\n            const temp = singleLine_content.replace(\"pointer\",\"\")\n            const singleLine_pointer = temp.trim();\n            let tobeAdded;\n            if(singleLine_pointer === \"0\"){\n                tobeAdded  = \"@THIS\";\n                console.log(\"This is the This keyword\");\n            }\n            else if(singleLine_pointer === \"1\"){\n                tobeAdded  = \"@THAT\";\n                console.log(\"This is the That keyword\");\n\n            }\n            \n            let comment = \"// pop\" + singleLine_content;\n            const pointerArr = [comment,\"@SP\",\"M=M-1\",\"@SP\",\"A=M\",\"D=M\",tobeAdded,\"M=D\"]\n            Assembly_code = [...Assembly_code,...pointerArr]\n            return Assembly_code;\n        }\n        else if(singleLine_content.includes(\"static\")){\n            let tobeSplitted = singleLine_content.trim();\n            let splitted_static =  tobeSplitted.split(\" \");\n\n            const comment = \"//pop\" + singleLine_content;\n            let static_variable = \"@vm.\" + splitted_static[1];\n            const static_arr = [comment,\"@SP\",\"M=M-1\",\"@SP\",\"A=M\",\"D=M\",static_variable,\"M=D\"];\n            Assembly_code = [...Assembly_code,...static_arr]\n            return Assembly_code\n        }\n        else{\n            const tobeSeparated_Pop = singleLine_content.trim();\n            const segments_pop = tobeSeparated_Pop.split(\" \");\n            const first_pop = \"@\" +segments_pop[1];\n            let next_pop = \"\";\n            let tempidentified = \"\";\n            let comment = \"// pop\" + singleLine_content\n            if(Object.keys(mappingObj).includes(segments_pop[0])){\n                next_pop = \"@\" + mappingObj[segments_pop[0]]\n                if(segments_pop[0] === \"temp\"){\n                    tempidentified = \"D=D+A\"\n                }\n                else{\n                    tempidentified = \"D=D+M\"\n\n                }\n            }\n            const segment_pop_arr = [comment,first_pop,\"D=A\",next_pop,tempidentified,\"@R13\",\"M=D\",\"@SP\",\"M=M-1\",\"@SP\",\"A=M\",\"D=M\",\"@R13\",\"A=M\",\"M=D\"];\n            Assembly_code = [...Assembly_code,...segment_pop_arr]\n            return Assembly_code\n        }\n    }\n\n    const gotoHandler = (singleLine) => {\n        const comment = \"//\" +singleLine;\n        const singleLine_content = singleLine.replace(\"goto\",\"\");\n        const goto_arr = [comment,\"@\" + singleLine_content.trim(),\"0;JMP\"];\n        Assembly_code = [...Assembly_code,...goto_arr]\n        return Assembly_code\n    }\n\n    const if_gotoHandler = (singleLine) => {\n        const comment = \"//\" + singleLine;\n        const singleLine_content= singleLine.replace(\"if-goto\",\"\");\n        const label = \"@\" + singleLine_content.trim();\n        const if_goto_arr = [comment,\"@SP\",\"M=M-1\",\"@SP\",\"A=M\",\"D=M\",label,\"D;JNE\"]\n        Assembly_code = [...Assembly_code,...if_goto_arr]\n        return Assembly_code\n    }\n\n    const labelHandler = (singleLine) => {\n        const comment = \"//\" +singleLine;\n        const singleLine_content = singleLine.replace(\"label\",\"\");\n        const label_arr = [comment,\"(\" + singleLine_content.trim() + \")\"];\n        Assembly_code = [...Assembly_code,...label_arr]\n        return Assembly_code\n    }\n\n    const callHandler = (singleLine) => {\n        const comment = \"//\" +singleLine;\n        const singleLine_content = singleLine.replace(\"call\",\"\").trim();\n        const name_arg = singleLine_content.split(\" \"); \n        const labelDeclaration =\"(returnaddress)\"\n        const labelReference = \"@returnaddress\"\n        const nargs = \"@\" + name_arg[1];\n        const functionName = \"@\" + name_arg[0];\n        const call_arr = [comment,labelReference,\"D=A\",\"@SP\",\"A=M\",\"M=D\",\"@SP\",\"M=M+1\",\n                                \"@LCL\",\"D=M\",\"@SP\",\"A=M\",\"M=D\",\"@SP\",\"M=M+1\",\n                                \"@ARG\",\"D=M\",\"@SP\",\"A=M\",\"M=D\",\"@SP\",\"M=M+1\",\n                                \"@THIS\",\"D=M\",\"@SP\",\"A=M\",\"M=D\",\"@SP\",\"M=M+1\",\n                                \"@THAT\",\"D=M\",\"@SP\",\"A=M\",\"M=D\",\"@SP\",\"M=M+1\",\n                                 \"@SP\",\"D=M\",\"@5\",\"D=D-A\",nargs,\"D=D-A\",\"@ARG\",\n                                \"M=D\",\"@SP\",\"D=M\",\"@LCL\",\"M=D\",functionName,\"0;JMP\",labelDeclaration];\n        Assembly_code = [...Assembly_code,...call_arr]\n        return Assembly_code\n\n    }\n\n    const functionHandler = (singleLine) => {\n        const comment = \"//\" + singleLine;\n        const singleLine_content = singleLine.replace(\"function\",\"\").trim();\n        const name_nargs = singleLine_content.split(\" \");\n        const functionName = \"(\" + name_nargs[0] + \")\";\n        const nargs = parseInt(name_nargs[1]);\n        const nargs_array = [];\n        new Array(nargs).fill(1).map(() => {\n            nargs_array.push(\"@0\",\"D=A\",\"@SP\",\"A=M\",\"M=D\",\"@SP\",\"M=M+1\");\n        }\n        )\n        console.log(\"This is the function\",nargs);\n        const function_arr = [comment,functionName,...nargs_array];\n        Assembly_code = [...Assembly_code,...function_arr]\n        return Assembly_code\n    }\n\n    const returnHandler = (singleLine) => {\n        const comment = \"//\" + singleLine;\n        const return_arr = [comment,\"@LCL\",\"D=M\",\"@R13\",\"M=D\",\"@5\",\"D=A\",\"@R13\",\"A=M-D\",\"D=M\",\"@R14\",\"M=D\",\n                            \"@SP\",\"M=M-1\",\"@SP\",\"A=M\",\"D=M\",\"@ARG\",\"A=M\",\"M=D\",\"@ARG\",\"D=M\",\"@SP\",\"M=D+1\",\"@R13\",\n                            \"A=M-1\",\"D=M\",\"@THAT\",\"M=D\",\"@2\",\"D=A\",\"@R13\",\"A=M-D\",\"D=M\",\"@THIS\",\"M=D\",\"@3\",\n                            \"D=A\",\"@R13\",\"A=M-D\",\"D=M\",\"@ARG\",\"M=D\",\"@4\",\"D=A\",\"@R13\",\"A=M-D\",\"D=M\",\"@LCL\",\n                            \"M=D\",\"@R14\",\"D=M\",\"D;JMP\"]\n        Assembly_code = [...Assembly_code,...return_arr]\n        return Assembly_code\n    }\n\n\n    const artihmeticHandler = (singleLine_content) => {\n        let mainSegment = \"\";\n        let athArr;\n        if(singleLine_content === \"neg\" || singleLine_content === \"not\"){\n            let comment = \"//\" + singleLine_content\n            if(singleLine_content === \"neg\"){\n                athArr = [comment,\"@SP\",\"M=M-1\",\"@SP\",\"A=M\",\"M=-M\",\"@SP\",\"M=M+1\"];\n            }\n            else if(singleLine_content === \"not\"){\n                athArr = [comment,\"@SP\",\"M=M-1\",\"@SP\",\"A=M\",\"M=!M\",\"@SP\",\"M=M+1\"];\n            }\n\n        }\n        else if(singleLine_content === \"gt\"){\n            let num = Math.floor(Math.random() *10);\n            let gt_var = \"@CHECKGT.\" + num;\n            let gt_label = \"(CHECKGT.\"+num+\")\";\n            let prev_var = \"@PREVIEWGT.\" + num;\n            let prev_label = \"(PREVIEWGT.\"+num+\")\";\n            let comment = \"//\" + singleLine_content\n            athArr = [comment,\"@SP\",\"M=M-1\",\"@SP\",\"A=M\",\"D=M\",\"@SP\",\"M=M-1\",\"@SP\",\"A=M\",\n            \"D=M-D\",gt_var,\"D;JGT\",\"D=0\",prev_var,\"0;JMP\",gt_label,\"D=-1\",prev_label,\"@SP\",\"A=M\",\"M=D\",\"@SP\",\"M=M+1\"];\n        }\n        else if(singleLine_content === \"lt\"){\n            let num = Math.floor(Math.random() *10);\n            let lt_var = \"@CHECKLT.\" + num;\n            let lt_label = \"(CHECKLT.\"+num +\")\";\n            let prev_var = \"@PREVIEWLT.\" + num;\n            let prev_label = \"(PREVIEWLT.\"+num+\")\";\n            let comment = \"//\" + singleLine_content\n            athArr = [comment,\"@SP\",\"M=M-1\",\"@SP\",\"A=M\",\"D=M\",\"@SP\",\"M=M-1\",\"@SP\",\"A=M\",\n            \"D=M-D\",lt_var,\"D;JLT\",\"D=0\",prev_var,\"0;JMP\",lt_label,\"D=-1\",prev_label,\"@SP\",\"A=M\",\"M=D\",\"@SP\",\"M=M+1\"];\n        }\n        else if(singleLine_content === \"eq\"){\n            let num = Math.floor(Math.random() *10);\n            let eq_var = \"@CHECKEQ.\" + num;\n            let eq_label = \"(CHECKEQ.\"+num+\")\";\n            let prev_var = \"@PREVIEWEQ.\" + num;\n            let prev_label = \"(PREVIEWEQ.\"+num+\")\";\n            let comment = \"//\" + singleLine_content\n            athArr = [comment,\"@SP\",\"M=M-1\",\"@SP\",\"A=M\",\"D=M\",\"@SP\",\"M=M-1\",\"@SP\",\"A=M\",\n            \"D=M-D\",eq_var,\"D;JEQ\",\"D=0\",prev_var,\"0;JMP\",eq_label,\"D=-1\",prev_label,\"@SP\",\"A=M\",\"M=D\",\"@SP\",\"M=M+1\"];\n        }\n        else{\n            if(singleLine_content === \"add\"){\n                mainSegment = \"D=M+D\"\n            }\n            else if(singleLine_content === \"sub\"){     \n                mainSegment = \"D=M-D\";\n            }\n            else if(singleLine_content === \"and\"){\n                mainSegment = \"D=M&D\"\n            }\n            else if(singleLine_content === \"or\"){\n                mainSegment = \"D=M|D\"\n            }\n            let comment = \"//\" + singleLine_content\n             athArr = [comment,\"@SP\",\"M=M-1\",\"@SP\",\"A=M\",\"D=M\",\"@SP\",\"M=M-1\",\"@SP\",\"A=M\",\n            mainSegment,\"@SP\",\"A=M\",\"M=D\",\"@SP\",\"M=M+1\"];\n            \n        }\n        \n        Assembly_code = [...Assembly_code,...athArr]\n\n        \n\n        return Assembly_code;\n    }\n\n\n    const codeReplacer = (singleLine_content) => {\n        if(singleLine_content.startsWith(\"push\")){\n            pushHandler(singleLine_content);\n        }\n        else if(singleLine_content.startsWith(\"pop\")){\n            popHandler(singleLine_content);\n        }\n        else if(singleLine_content.startsWith(\"goto\")){\n            gotoHandler(singleLine_content);\n        }\n        else if(singleLine_content.startsWith(\"label\")){\n            labelHandler(singleLine_content);\n        }\n        else if(singleLine_content.startsWith(\"if-goto\")){\n            if_gotoHandler(singleLine_content);\n        }\n        else if(singleLine_content.startsWith(\"call\")){\n            callHandler(singleLine_content);\n        }\n        else if(singleLine_content.startsWith(\"function\")){\n            functionHandler(singleLine_content);\n        }\n        else if(singleLine_content.startsWith(\"return\")){\n            returnHandler(singleLine_content);\n        }\n        else {\n            artihmeticHandler(singleLine_content);\n        }\n    }\n\n \n        content.map((item) =>{\n                return codeReplacer(item)\n            }\n        )\n\n \n\n    return (\n        <div>\n            <ConvertToFile content={Assembly_code} />\n        </div>\n    );\n}\n\nexport default Codewriter;"]},"metadata":{},"sourceType":"module"}