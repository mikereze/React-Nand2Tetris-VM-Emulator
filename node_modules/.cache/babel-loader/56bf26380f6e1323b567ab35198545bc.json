{"ast":null,"code":"var _jsxFileName = \"/home/mike/Documents/Nand2Tetris React Projects/VM Translator/src/Components/Codewriter.js\";\nimport React from 'react';\nimport ConvertToFile from './ConvertToFile';\n\nconst Codewriter = ({\n  content\n}) => {\n  let Assembly_code = [];\n  const mappingObj = {\n    local: \"LCL\",\n    argument: \"ARG\",\n    this: \"THIS\",\n    that: \"THAT\",\n    temp: \"5\"\n  };\n\n  const pushHandler = singleLine => {\n    const singleLine_content = singleLine.replace(\"push\", \"\");\n\n    if (singleLine_content.includes(\"constant\")) {\n      const temp = singleLine_content.replace(\"constant\", \"\");\n      const singleLine_constant = temp.trim();\n      const tobePushed = \"@\" + singleLine_constant;\n      let comment = \"// push\" + singleLine_content;\n      const constant_arr = [comment, tobePushed, \"D=A\", \"@SP\", \"A=M\", \"M=D\", \"@SP\", \"M=M+1\"];\n      Assembly_code = [...Assembly_code, ...constant_arr];\n      return Assembly_code;\n    } else if (singleLine_content.includes(\"pointer\")) {\n      const temp = singleLine_content.replace(\"pointer\", \"\");\n      const singleLine_pointer = temp.trim();\n      let tobePushed;\n\n      if (singleLine_pointer === \"0\") {\n        tobePushed = \"@THIS\";\n        console.log(\"This is the This keyword\");\n      } else if (singleLine_pointer === \"1\") {\n        tobePushed = \"@THAT\";\n        console.log(\"This is the That keyword\");\n      }\n\n      let comment = \"// push\" + singleLine_content;\n      const constant_arr = [comment, tobePushed, \"D=A\", \"@SP\", \"A=M\", \"M=D\", \"@SP\", \"M=M+1\"];\n      Assembly_code = [...Assembly_code, ...constant_arr];\n      return Assembly_code;\n    } else if (singleLine_content.includes(\"static\")) {\n      return Assembly_code;\n    } else {\n      const tobeSeparated = singleLine_content.trim();\n      const segments = tobeSeparated.split(\" \");\n      const firstValue = \"@\" + segments[1];\n      let nextValue = \"\";\n      let tempidentified = \"\";\n\n      if (Object.keys(mappingObj).includes(segments[0])) {\n        nextValue = \"@\" + mappingObj[segments[0]];\n\n        if (segments[0] === \"temp\") {\n          tempidentified = \"A=A+D\";\n        } else {\n          tempidentified = \"A=M+D\";\n        }\n      }\n\n      let comment = \"// push\" + singleLine_content;\n      const segmentArr = [comment, firstValue, \"D=A\", nextValue, tempidentified, \"D=M\", \"@SP\", \"A=M\", \"M=D\", \"@SP\", \"M=M+1\"];\n      Assembly_code = [...Assembly_code, ...segmentArr];\n      return Assembly_code;\n    }\n  };\n\n  const popHandler = singleLine => {\n    const singleLine_content = singleLine.replace(\"pop\", \"\");\n\n    if (singleLine_content.includes(\"pointer\")) {\n      const temp = singleLine_content.replace(\"pointer\", \"\");\n      const singleLine_pointer = temp.trim();\n      let tobeAdded;\n\n      if (singleLine_pointer === \"0\") {\n        tobeAdded = \"@THIS\";\n        console.log(\"This is the This keyword\");\n      } else if (singleLine_pointer === \"1\") {\n        tobeAdded = \"@THAT\";\n        console.log(\"This is the That keyword\");\n      }\n\n      let comment = \"// pop\" + singleLine_content;\n      const pointerArr = [comment, \"@SP\", \"M=M-1\", \"@SP\", \"A=M\", \"D=M\", tobeAdded, \"A=D\"];\n      Assembly_code = [...Assembly_code, ...pointerArr];\n      return Assembly_code;\n    } else if (singleLine_content.includes(\"static\")) {\n      return Assembly_code;\n    } else {\n      const tobeSeparated_Pop = singleLine_content.trim();\n      const segments_pop = tobeSeparated_Pop.split(\" \");\n      const first_pop = \"@\" + segments_pop[1];\n      let next_pop = \"\";\n      let tempidentified = \"\";\n      let comment = \"// pop\" + singleLine_content;\n\n      if (Object.keys(mappingObj).includes(segments_pop[0])) {\n        next_pop = \"@\" + mappingObj[segments_pop[0]];\n\n        if (segments_pop[0] === \"temp\") {\n          tempidentified = \"D=D+A\";\n        } else {\n          tempidentified = \"D=D+M\";\n        }\n      }\n\n      const segment_pop_arr = [comment, first_pop, \"D=A\", next_pop, tempidentified, \"@R13\", \"M=D\", \"@SP\", \"M=M-1\", \"@SP\", \"A=M\", \"D=M\", \"@R13\", \"A=M\", \"M=D\"];\n      Assembly_code = [...Assembly_code, ...segment_pop_arr];\n      return Assembly_code;\n    }\n  };\n\n  const artihmeticHandler = singleLine_content => {\n    let mainSegment = \"\";\n    let athArr;\n\n    if (singleLine_content === \"neg\" || singleLine_content === \"not\") {\n      let comment = \"//\" + singleLine_content;\n\n      if (singleLine_content === \"neg\") {\n        athArr = [comment, \"@SP\", \"M=M-1\", \"@SP\", \"A=M\", \"M=-M\", \"@SP\", \"M=M+1\"];\n      } else if (singleLine_content === \"not\") {\n        athArr = [comment, \"@SP\", \"M=M-1\", \"@SP\", \"A=M\", \"M=!M\", \"@SP\", \"M=M+1\"];\n      }\n    } else {\n      if (singleLine_content === \"add\") {\n        mainSegment = \"D=M+D\";\n      } else if (singleLine_content === \"sub\") {\n        mainSegment = \"D=M-D\";\n      } else if (singleLine_content === \"and\") {\n        mainSegment = \"D=M&D\";\n      } else if (singleLine_content === \"or\") {\n        mainSegment = \"D=M|D\";\n      } else if (singleLine_content === \"gt\") {} else if (singleLine_content === \"lt\") {} else if (singleLine_content === \"eq\") {}\n\n      let comment = \"//\" + singleLine_content;\n      athArr = [comment, \"@SP\", \"M=M-1\", \"@SP\", \"A=M\", \"D=M\", \"@SP\", \"M=M-1\", \"@SP\", \"A=M\", mainSegment, \"@SP\", \"A=M\", \"M=D\", \"@SP\", \"M=M+1\"];\n    }\n\n    Assembly_code = [...Assembly_code, ...athArr];\n    return Assembly_code;\n  };\n\n  const codeReplacer = singleLine_content => {\n    if (singleLine_content.startsWith(\"push\")) {\n      pushHandler(singleLine_content);\n    } else if (singleLine_content.startsWith(\"pop\")) {\n      popHandler(singleLine_content);\n    } else {\n      artihmeticHandler(singleLine_content);\n    }\n  };\n\n  content.map(item => {\n    return codeReplacer(item);\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ConvertToFile, {\n    content: Assembly_code,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default Codewriter;","map":{"version":3,"sources":["/home/mike/Documents/Nand2Tetris React Projects/VM Translator/src/Components/Codewriter.js"],"names":["React","ConvertToFile","Codewriter","content","Assembly_code","mappingObj","local","argument","this","that","temp","pushHandler","singleLine","singleLine_content","replace","includes","singleLine_constant","trim","tobePushed","comment","constant_arr","singleLine_pointer","console","log","tobeSeparated","segments","split","firstValue","nextValue","tempidentified","Object","keys","segmentArr","popHandler","tobeAdded","pointerArr","tobeSeparated_Pop","segments_pop","first_pop","next_pop","segment_pop_arr","artihmeticHandler","mainSegment","athArr","codeReplacer","startsWith","map","item"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ConvertToFile from './ConvertToFile';\n\nconst Codewriter = ({content}) => {\n\n    let Assembly_code = [];\n    const mappingObj = { local : \"LCL\",argument : \"ARG\", this: \"THIS\",that: \"THAT\",temp : \"5\"};\n\n\n    const pushHandler = (singleLine) => {\n        const singleLine_content = singleLine.replace(\"push\",\"\");\n        if(singleLine_content.includes(\"constant\")){\n            const temp = singleLine_content.replace(\"constant\",\"\");\n            const singleLine_constant = temp.trim();\n            const tobePushed = \"@\" + singleLine_constant;\n            let comment = \"// push\" + singleLine_content;\n\n            const constant_arr = [comment,tobePushed,\"D=A\",\"@SP\",\"A=M\",\"M=D\",\"@SP\",\"M=M+1\"];\n            Assembly_code = [...Assembly_code,...constant_arr];\n            return Assembly_code;\n        }\n        else if(singleLine_content.includes(\"pointer\")){\n            const temp = singleLine_content.replace(\"pointer\",\"\");\n            const singleLine_pointer = temp.trim();\n            let tobePushed;\n            if(singleLine_pointer === \"0\"){\n                tobePushed  = \"@THIS\";\n                console.log(\"This is the This keyword\");\n            }\n            else if(singleLine_pointer === \"1\"){\n                tobePushed  = \"@THAT\";\n                console.log(\"This is the That keyword\");\n\n            }\n            let comment = \"// push\" + singleLine_content;\n\n            const constant_arr = [comment,tobePushed,\"D=A\",\"@SP\",\"A=M\",\"M=D\",\"@SP\",\"M=M+1\"];\n            Assembly_code = [...Assembly_code,...constant_arr];\n            return Assembly_code;\n        }\n        else if(singleLine_content.includes(\"static\")){\n            return Assembly_code\n        }\n        else{\n            const tobeSeparated = singleLine_content.trim();\n            const segments = tobeSeparated.split(\" \");\n            const firstValue = \"@\" +segments[1];\n            let nextValue = \"\";\n            let tempidentified = \"\";\n            if(Object.keys(mappingObj).includes(segments[0])){\n                    nextValue = \"@\" + mappingObj[segments[0]]\n                    if(segments[0] === \"temp\"){\n                        tempidentified = \"A=A+D\"\n                    }\n                    else{\n                        tempidentified = \"A=M+D\"\n    \n                    }\n            }\n            let comment = \"// push\" + singleLine_content;\n            const segmentArr = [comment,firstValue,\"D=A\",nextValue,tempidentified,\"D=M\",\"@SP\",\"A=M\",\"M=D\",\"@SP\",\"M=M+1\"]\n            Assembly_code = [...Assembly_code,...segmentArr]\n            return Assembly_code \n        }\n    }\n\n\n    const popHandler = (singleLine) => {\n        const singleLine_content = singleLine.replace(\"pop\",\"\");\n        if(singleLine_content.includes(\"pointer\")){\n            const temp = singleLine_content.replace(\"pointer\",\"\")\n            const singleLine_pointer = temp.trim();\n            let tobeAdded;\n            if(singleLine_pointer === \"0\"){\n                tobeAdded  = \"@THIS\";\n                console.log(\"This is the This keyword\");\n            }\n            else if(singleLine_pointer === \"1\"){\n                tobeAdded  = \"@THAT\";\n                console.log(\"This is the That keyword\");\n\n            }\n            \n            let comment = \"// pop\" + singleLine_content;\n            const pointerArr = [comment,\"@SP\",\"M=M-1\",\"@SP\",\"A=M\",\"D=M\",tobeAdded,\"A=D\"]\n            Assembly_code = [...Assembly_code,...pointerArr]\n            return Assembly_code;\n        }\n        else if(singleLine_content.includes(\"static\")){\n            return Assembly_code\n        }\n        else{\n            const tobeSeparated_Pop = singleLine_content.trim();\n            const segments_pop = tobeSeparated_Pop.split(\" \");\n            const first_pop = \"@\" +segments_pop[1];\n            let next_pop = \"\";\n            let tempidentified = \"\";\n            let comment = \"// pop\" + singleLine_content\n            if(Object.keys(mappingObj).includes(segments_pop[0])){\n                next_pop = \"@\" + mappingObj[segments_pop[0]]\n                if(segments_pop[0] === \"temp\"){\n                    tempidentified = \"D=D+A\"\n                }\n                else{\n                    tempidentified = \"D=D+M\"\n\n                }\n            }\n            const segment_pop_arr = [comment,first_pop,\"D=A\",next_pop,tempidentified,\"@R13\",\"M=D\",\"@SP\",\"M=M-1\",\"@SP\",\"A=M\",\"D=M\",\"@R13\",\"A=M\",\"M=D\"];\n            Assembly_code = [...Assembly_code,...segment_pop_arr]\n            return Assembly_code\n        }\n    }\n\n\n    const artihmeticHandler = (singleLine_content) => {\n        let mainSegment = \"\";\n        let athArr;\n        if(singleLine_content === \"neg\" || singleLine_content === \"not\"){\n            let comment = \"//\" + singleLine_content\n            if(singleLine_content === \"neg\"){\n                athArr = [comment,\"@SP\",\"M=M-1\",\"@SP\",\"A=M\",\"M=-M\",\"@SP\",\"M=M+1\"];\n            }\n            else if(singleLine_content === \"not\"){\n                athArr = [comment,\"@SP\",\"M=M-1\",\"@SP\",\"A=M\",\"M=!M\",\"@SP\",\"M=M+1\"];\n            }\n\n        }\n        else{\n            if(singleLine_content === \"add\"){\n                mainSegment = \"D=M+D\"\n            }\n            else if(singleLine_content === \"sub\"){     \n                mainSegment = \"D=M-D\";\n            }\n            else if(singleLine_content === \"and\"){\n                mainSegment = \"D=M&D\"\n            }\n            else if(singleLine_content === \"or\"){\n                mainSegment = \"D=M|D\"\n            }\n            else if(singleLine_content === \"gt\"){\n    \n            }\n            else if(singleLine_content === \"lt\"){\n    \n            }\n            else if(singleLine_content === \"eq\"){\n    \n            }\n            let comment = \"//\" + singleLine_content\n             athArr = [comment,\"@SP\",\"M=M-1\",\"@SP\",\"A=M\",\"D=M\",\"@SP\",\"M=M-1\",\"@SP\",\"A=M\",\n            mainSegment,\"@SP\",\"A=M\",\"M=D\",\"@SP\",\"M=M+1\"];\n            \n        }\n        \n        Assembly_code = [...Assembly_code,...athArr]\n\n        \n\n        return Assembly_code;\n    }\n\n\n    const codeReplacer = (singleLine_content) => {\n        if(singleLine_content.startsWith(\"push\")){\n            pushHandler(singleLine_content);\n        }\n        else if(singleLine_content.startsWith(\"pop\")){\n            popHandler(singleLine_content);\n        }\n        else {\n            artihmeticHandler(singleLine_content);\n        }\n    }\n\n \n        content.map((item) =>{\n                return codeReplacer(item)\n            }\n            )\n\n \n\n    return (\n        <div>\n            <ConvertToFile content={Assembly_code} />\n        </div>\n    );\n}\n\nexport default Codewriter;"]},"metadata":{},"sourceType":"module"}