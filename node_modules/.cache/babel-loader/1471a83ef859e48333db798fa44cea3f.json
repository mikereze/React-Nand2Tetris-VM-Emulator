{"ast":null,"code":"var _jsxFileName = \"/home/mike/Documents/Assembler/src/App.js\";\nimport React from 'react';\nimport './App.css';\nimport { useState } from 'react';\n\nconst ImportFromFileComponent = ({\n  handleFileChosen\n}) => {\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  }, \"Hello there you can load your assembly code\"), React.createElement(\"input\", {\n    type: \"file\",\n    accept: \".asm\",\n    onChange: e => handleFileChosen(e.target.files[0]),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  }));\n};\n\nconst AfterLoad = ({\n  content\n}) => {\n  console.log(\"AM I Loading Twice\");\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, React.createElement(Ainstruction, {\n    content: content,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }));\n};\n\nconst Ainstruction = ({\n  content\n}) => {\n  var regex = /@[0-9]/; // const decimaltoBinary = (decimal) => {\n  //         var removeAt = decimal.replace('@','');\n  //         console.log(removeAt);\n  // }\n\n  var trimmedContent = content.trim();\n  var contents = trimmedContent.split(\"\\n\");\n  console.log(contents.length);\n\n  for (var x = 0; x < contents.length; x++) {\n    if (regex.test(contents[x])) {\n      console.log(typeof contents[x]);\n    }\n  }\n\n  return \"Handling A instruction\";\n};\n\nconst App = () => {\n  let fileReader;\n  const [content, setContent] = useState(\" \");\n  const [loaded, setLoaded] = useState(false);\n\n  const handleFileRead = e => {\n    setLoaded(true);\n    setContent(fileReader.result);\n    console.log(content);\n  };\n\n  const handleFileChosen = file => {\n    fileReader = new FileReader();\n    fileReader.onloadend = handleFileRead;\n    fileReader.readAsText(file);\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, React.createElement(ImportFromFileComponent, {\n    handleFileChosen: handleFileChosen,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }), loaded && React.createElement(AfterLoad, {\n    content: content,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }));\n};\n\nexport default App;","map":{"version":3,"sources":["/home/mike/Documents/Assembler/src/App.js"],"names":["React","useState","ImportFromFileComponent","handleFileChosen","e","target","files","AfterLoad","content","console","log","Ainstruction","regex","trimmedContent","trim","contents","split","length","x","test","App","fileReader","setContent","loaded","setLoaded","handleFileRead","result","file","FileReader","onloadend","readAsText"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;AACA,SAAQC,QAAR,QAAuB,OAAvB;;AAGA,MAAMC,uBAAuB,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAwB;AACpD,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mDADA,EAEA;AAAO,IAAA,IAAI,EAAC,MAAZ;AACQ,IAAA,MAAM,EAAC,MADf;AAEQ,IAAA,QAAQ,EAAIC,CAAD,IAAOD,gBAAgB,CAACC,CAAC,CAACC,MAAF,CAASC,KAAT,CAAe,CAAf,CAAD,CAF1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFA,CADJ;AASH,CAVD;;AAYA,MAAMC,SAAS,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAe;AAC7BC,EAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,YAAD;AAAc,IAAA,OAAO,EAAEF,OAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ;AAMH,CARD;;AAUA,MAAMG,YAAY,GAAG,CAAC;AAACH,EAAAA;AAAD,CAAD,KAAe;AAEhC,MAAII,KAAK,GAAG,QAAZ,CAFgC,CAIhC;AACA;AACA;AACA;;AAGA,MAAIC,cAAc,GAAGL,OAAO,CAACM,IAAR,EAArB;AACA,MAAIC,QAAQ,GAAGF,cAAc,CAACG,KAAf,CAAqB,IAArB,CAAf;AACAP,EAAAA,OAAO,CAACC,GAAR,CAAYK,QAAQ,CAACE,MAArB;;AACA,OAAI,IAAIC,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACH,QAAQ,CAACE,MAAvB,EAA8BC,CAAC,EAA/B,EAAkC;AAC9B,QAAGN,KAAK,CAACO,IAAN,CAAWJ,QAAQ,CAACG,CAAD,CAAnB,CAAH,EAA2B;AACvBT,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAOK,QAAQ,CAACG,CAAD,CAA3B;AACH;AACJ;;AAGD,SAAO,wBAAP;AACH,CArBD;;AAwBA,MAAME,GAAG,GAAG,MAAM;AAGd,MAAIC,UAAJ;AACA,QAAM,CAAEb,OAAF,EAAWc,UAAX,IAAyBrB,QAAQ,CAAC,GAAD,CAAvC;AACA,QAAM,CAAEsB,MAAF,EAAWC,SAAX,IAAwBvB,QAAQ,CAAC,KAAD,CAAtC;;AAEA,QAAMwB,cAAc,GAAIrB,CAAD,IAAO;AACtBoB,IAAAA,SAAS,CAAC,IAAD,CAAT;AACAF,IAAAA,UAAU,CAACD,UAAU,CAACK,MAAZ,CAAV;AACAjB,IAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACP,GAJD;;AAMA,QAAML,gBAAgB,GAAIwB,IAAD,IAAU;AAC3BN,IAAAA,UAAU,GAAG,IAAIO,UAAJ,EAAb;AACAP,IAAAA,UAAU,CAACQ,SAAX,GAAuBJ,cAAvB;AACAJ,IAAAA,UAAU,CAACS,UAAX,CAAsBH,IAAtB;AACP,GAJD;;AAMA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA,oBAAC,uBAAD;AAAyB,IAAA,gBAAgB,EAAExB,gBAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,EAECoB,MAAM,IAAI,oBAAC,SAAD;AAAW,IAAA,OAAO,EAAEf,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFX,CADJ;AAQH,CA3BD;;AA8BA,eAAeY,GAAf","sourcesContent":["import React from 'react';\nimport './App.css';\nimport {useState} from 'react';\n\n\nconst ImportFromFileComponent = ({handleFileChosen}) => {\n    return (\n        <div >\n        <p>Hello there you can load your assembly code</p>\n        <input type='file'\n                accept=\".asm\"\n                onChange={ (e) => handleFileChosen(e.target.files[0])}/>\n        </div>\n\n    );\n}\n\nconst AfterLoad = ({content}) => {\n    console.log(\"AM I Loading Twice\");\n    return (\n        <div>\n            <Ainstruction content={content}/>\n        </div>\n\n    );\n}\n\nconst Ainstruction = ({content}) => {\n\n    var regex = /@[0-9]/;\n\n    // const decimaltoBinary = (decimal) => {\n    //         var removeAt = decimal.replace('@','');\n    //         console.log(removeAt);\n    // }\n\n    \n    var trimmedContent = content.trim();\n    var contents = trimmedContent.split(\"\\n\");\n    console.log(contents.length);\n    for(var x=0;x<contents.length;x++){\n        if(regex.test(contents[x])){\n            console.log(typeof(contents[x]));\n        }\n    }\n\n\n    return \"Handling A instruction\"\n}\n\n\nconst App = () => {\n\n\n    let fileReader;\n    const [ content, setContent] = useState(\" \");\n    const [ loaded,  setLoaded] = useState(false);\n\n    const handleFileRead = (e) => {\n            setLoaded(true)\n            setContent(fileReader.result);\n            console.log(content);\n    }\n\n    const handleFileChosen = (file) => {\n            fileReader = new FileReader();\n            fileReader.onloadend = handleFileRead;\n            fileReader.readAsText(file);\n    }\n\n    return (\n        <div>\n        <ImportFromFileComponent handleFileChosen={handleFileChosen}/>\n        {loaded && <AfterLoad content={content}/>}\n        </div>\n    );\n  \n\n}\n\n\nexport default App;"]},"metadata":{},"sourceType":"module"}