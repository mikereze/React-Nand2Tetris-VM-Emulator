{"ast":null,"code":"var _jsxFileName = \"/home/mike/Documents/Assembler/src/Components/SymbolsHandling.js\";\nimport React from 'react';\nimport Ainstruction from './Ainstruction';\nconst symbols = {\n  R0: \"0\",\n  R1: \"1\",\n  R2: \"2\",\n  R3: \"3\",\n  R4: \"4\",\n  R5: \"5\",\n  R6: \"6\",\n  R7: \"7\",\n  R8: \"8\",\n  R9: \"9\",\n  R10: \"10\",\n  R11: \"11\",\n  R12: \"12\",\n  R13: \"13\",\n  R14: \"14\",\n  R15: \"15\",\n  SCREEN: \"16384\",\n  KBD: \"24576\",\n  SP: \"0\",\n  LCL: \"1\",\n  ARG: \"2\",\n  THIS: \"3\",\n  THAT: \"4\"\n};\n\nconst SymbolsHandling = ({\n  content\n}) => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Labelhandling, {\n    content: content,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }\n  }));\n};\n\nconst Labelhandling = ({\n  content\n}) => {\n  // const regLabel = /([A-Z])/;\n  let numberOfLabelsPassed = 0;\n  let content_updated = [];\n\n  const extractor = singleLine => {\n    const temp = singleLine.replace(\"(\", \"\");\n    const temp2 = temp.replace(\")\", \"\");\n    return temp2;\n  };\n\n  const addAndReplaceLabels = (singleLine_content, x, numberOfLabelsPassed) => {\n    symbols[singleLine_content] = x - numberOfLabelsPassed;\n    const tobeReturned = x - numberOfLabelsPassed;\n    return tobeReturned;\n  };\n\n  for (var x = 0; x < content.length; x++) {\n    // console.log(\"THis is are the Labels baby\",content[x])\n    if (content[x].includes('(')) {\n      const extracted = extractor(content[x]);\n      const toBeUpdated = \"@\" + addAndReplaceLabels(extracted, x, numberOfLabelsPassed);\n      numberOfLabelsPassed++;\n    } else if (!content[x].includes('(') && !content[x].includes(')')) {\n      content_updated.push(content[x]);\n    }\n  } // console.log(\"This is the Handled Label Bitches\",content_updated,symbols)\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(Variablehandlng, {\n    content: content_updated,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 6\n    }\n  }));\n};\n\nconst Variablehandlng = ({\n  content\n}) => {\n  let count = 16;\n  const regAinstruction = /@[0-9]/;\n\n  const addNewVariables = tobeAddedSymbol => {\n    symbols[tobeAddedSymbol] = count.toString();\n    const tobeReplaced = replacExisitingVariables(tobeAddedSymbol);\n    count++;\n    return tobeReplaced;\n  };\n\n  const replacExisitingVariables = singleLine_content => {\n    Object.keys(symbols).map(item => {\n      if (singleLine_content.trim() === item) {\n        let updatedSymbol = \"@\" + symbols[item];\n        singleLine_content = updatedSymbol;\n      }\n    });\n    return singleLine_content;\n  };\n\n  for (var x = 0; x < content.length; x++) {\n    if (content[x].includes('@') && !regAinstruction.test(content[x])) {\n      content[x] = content[x].replace('@', '');\n\n      if (Object.keys(symbols).includes(content[x].trim())) {\n        const replacedVarible = replacExisitingVariables(content[x]);\n        content[x] = replacedVarible;\n      } else {\n        const updatedVariable = addNewVariables(content[x].trim());\n        content[x] = updatedVariable;\n      }\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Ainstruction, {\n    content: content,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }\n  }));\n};\n\nexport default SymbolsHandling;","map":{"version":3,"sources":["/home/mike/Documents/Assembler/src/Components/SymbolsHandling.js"],"names":["React","Ainstruction","symbols","R0","R1","R2","R3","R4","R5","R6","R7","R8","R9","R10","R11","R12","R13","R14","R15","SCREEN","KBD","SP","LCL","ARG","THIS","THAT","SymbolsHandling","content","Labelhandling","numberOfLabelsPassed","content_updated","extractor","singleLine","temp","replace","temp2","addAndReplaceLabels","singleLine_content","x","tobeReturned","length","includes","extracted","toBeUpdated","push","Variablehandlng","count","regAinstruction","addNewVariables","tobeAddedSymbol","toString","tobeReplaced","replacExisitingVariables","Object","keys","map","item","trim","updatedSymbol","test","replacedVarible","updatedVariable"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AAEA,MAAMC,OAAO,GAAG;AACZC,EAAAA,EAAE,EAAG,GADO;AAEZC,EAAAA,EAAE,EAAG,GAFO;AAGZC,EAAAA,EAAE,EAAG,GAHO;AAIZC,EAAAA,EAAE,EAAG,GAJO;AAKZC,EAAAA,EAAE,EAAG,GALO;AAMZC,EAAAA,EAAE,EAAG,GANO;AAOZC,EAAAA,EAAE,EAAG,GAPO;AAQZC,EAAAA,EAAE,EAAG,GARO;AASZC,EAAAA,EAAE,EAAG,GATO;AAUZC,EAAAA,EAAE,EAAG,GAVO;AAWZC,EAAAA,GAAG,EAAG,IAXM;AAYZC,EAAAA,GAAG,EAAG,IAZM;AAaZC,EAAAA,GAAG,EAAG,IAbM;AAcZC,EAAAA,GAAG,EAAG,IAdM;AAeZC,EAAAA,GAAG,EAAG,IAfM;AAgBZC,EAAAA,GAAG,EAAG,IAhBM;AAiBZC,EAAAA,MAAM,EAAG,OAjBG;AAkBZC,EAAAA,GAAG,EAAG,OAlBM;AAmBZC,EAAAA,EAAE,EAAG,GAnBO;AAoBZC,EAAAA,GAAG,EAAG,GApBM;AAqBZC,EAAAA,GAAG,EAAG,GArBM;AAsBZC,EAAAA,IAAI,EAAG,GAtBK;AAuBZC,EAAAA,IAAI,EAAG;AAvBK,CAAhB;;AA0BA,MAAMC,eAAe,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAe;AACnC,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,aAAD;AAAe,IAAA,OAAO,EAAEA,OAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ;AAKH,CAND;;AASA,MAAMC,aAAa,GAAG,CAAC;AAACD,EAAAA;AAAD,CAAD,KAAe;AAGjC;AACA,MAAIE,oBAAoB,GAAG,CAA3B;AACA,MAAIC,eAAe,GAAG,EAAtB;;AAGC,QAAMC,SAAS,GAAIC,UAAD,IAAgB;AAC9B,UAAMC,IAAI,GAAGD,UAAU,CAACE,OAAX,CAAmB,GAAnB,EAAuB,EAAvB,CAAb;AACA,UAAMC,KAAK,GAAGF,IAAI,CAACC,OAAL,CAAa,GAAb,EAAiB,EAAjB,CAAd;AACA,WAAOC,KAAP;AACH,GAJD;;AAMA,QAAMC,mBAAmB,GAAG,CAACC,kBAAD,EAAoBC,CAApB,EAAsBT,oBAAtB,KAA+C;AACnE3B,IAAAA,OAAO,CAACmC,kBAAD,CAAP,GAA8BC,CAAC,GAACT,oBAAhC;AACA,UAAMU,YAAY,GAAID,CAAC,GAAGT,oBAA1B;AACA,WAAOU,YAAP;AAEP,GALD;;AAOA,OAAI,IAAID,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACX,OAAO,CAACa,MAAtB,EAA6BF,CAAC,EAA9B,EAAiC;AAC7B;AACH,QAAGX,OAAO,CAACW,CAAD,CAAP,CAAWG,QAAX,CAAoB,GAApB,CAAH,EAA4B;AAEzB,YAAMC,SAAS,GAAGX,SAAS,CAACJ,OAAO,CAACW,CAAD,CAAR,CAA3B;AACA,YAAMK,WAAW,GAAG,MAAMP,mBAAmB,CAACM,SAAD,EAAWJ,CAAX,EAAaT,oBAAb,CAA7C;AACAA,MAAAA,oBAAoB;AACtB,KALD,MAMK,IAAG,CAACF,OAAO,CAACW,CAAD,CAAP,CAAWG,QAAX,CAAoB,GAApB,CAAD,IAA6B,CAACd,OAAO,CAACW,CAAD,CAAP,CAAWG,QAAX,CAAoB,GAApB,CAAjC,EAA0D;AAC3DX,MAAAA,eAAe,CAACc,IAAhB,CAAqBjB,OAAO,CAACW,CAAD,CAA5B;AACH;AACL,GAhCmC,CAiCpC;;;AACA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA,oBAAC,eAAD;AAAiB,IAAA,OAAO,EAAGR,eAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,CADJ;AAKC,CAvCF;;AA0CC,MAAMe,eAAe,GAAG,CAAC;AAAClB,EAAAA;AAAD,CAAD,KAAe;AAEpC,MAAImB,KAAK,GAAG,EAAZ;AACA,QAAMC,eAAe,GAAG,QAAxB;;AAEA,QAAMC,eAAe,GAAIC,eAAD,IAAqB;AAEzC/C,IAAAA,OAAO,CAAC+C,eAAD,CAAP,GAA2BH,KAAK,CAACI,QAAN,EAA3B;AACA,UAAMC,YAAY,GAAIC,wBAAwB,CAACH,eAAD,CAA9C;AACAH,IAAAA,KAAK;AACL,WAAOK,YAAP;AACP,GANG;;AAQJ,QAAMC,wBAAwB,GAAIf,kBAAD,IAAwB;AACrDgB,IAAAA,MAAM,CAACC,IAAP,CAAYpD,OAAZ,EAAqBqD,GAArB,CAA0BC,IAAD,IAAU;AAC/B,UAAGnB,kBAAkB,CAACoB,IAAnB,OAA8BD,IAAjC,EAAsC;AAClC,YAAIE,aAAa,GAAG,MAAMxD,OAAO,CAACsD,IAAD,CAAjC;AACAnB,QAAAA,kBAAkB,GAAGqB,aAArB;AACH;AACJ,KALD;AAMA,WAAOrB,kBAAP;AACH,GARD;;AAUA,OAAI,IAAIC,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACX,OAAO,CAACa,MAAtB,EAA6BF,CAAC,EAA9B,EAAiC;AAC7B,QAAGX,OAAO,CAACW,CAAD,CAAP,CAAWG,QAAX,CAAoB,GAApB,KAA4B,CAACM,eAAe,CAACY,IAAhB,CAAqBhC,OAAO,CAACW,CAAD,CAA5B,CAAhC,EAAiE;AAC7DX,MAAAA,OAAO,CAACW,CAAD,CAAP,GAAaX,OAAO,CAACW,CAAD,CAAP,CAAWJ,OAAX,CAAmB,GAAnB,EAAuB,EAAvB,CAAb;;AAEA,UAAGmB,MAAM,CAACC,IAAP,CAAYpD,OAAZ,EAAqBuC,QAArB,CAA8Bd,OAAO,CAACW,CAAD,CAAP,CAAWmB,IAAX,EAA9B,CAAH,EAAoD;AAChD,cAAOG,eAAe,GAAGR,wBAAwB,CAACzB,OAAO,CAACW,CAAD,CAAR,CAAjD;AACAX,QAAAA,OAAO,CAACW,CAAD,CAAP,GAAasB,eAAb;AAEH,OAJD,MAKI;AACI,cAAOC,eAAe,GAAGb,eAAe,CAACrB,OAAO,CAACW,CAAD,CAAP,CAAWmB,IAAX,EAAD,CAAxC;AACA9B,QAAAA,OAAO,CAACW,CAAD,CAAP,GAAauB,eAAb;AAEP;AACJ;AAEJ;;AACD,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,YAAD;AAAc,IAAA,OAAO,EAAElC,OAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ;AAMC,CA9CA;;AAgDA,eAAeD,eAAf","sourcesContent":["import React from 'react';\nimport Ainstruction from './Ainstruction'\n\nconst symbols = {\n    R0 : \"0\",\n    R1 : \"1\",\n    R2 : \"2\",\n    R3 : \"3\",\n    R4 : \"4\",\n    R5 : \"5\",\n    R6 : \"6\",\n    R7 : \"7\",\n    R8 : \"8\",\n    R9 : \"9\",\n    R10 : \"10\",\n    R11 : \"11\",\n    R12 : \"12\",\n    R13 : \"13\",\n    R14 : \"14\",\n    R15 : \"15\",\n    SCREEN : \"16384\",\n    KBD : \"24576\",\n    SP : \"0\",\n    LCL : \"1\",\n    ARG : \"2\",\n    THIS : \"3\",\n    THAT : \"4\"\n}\n\nconst SymbolsHandling = ({content}) => {\n    return (\n        <div>\n            <Labelhandling content={content}/>\n        </div>\n    );\n}\n\n\nconst Labelhandling = ({content}) => {\n\n\n    // const regLabel = /([A-Z])/;\n    let numberOfLabelsPassed = 0;\n    let content_updated = [];\n \n \n     const extractor = (singleLine) => {\n         const temp = singleLine.replace(\"(\",\"\");\n         const temp2 = temp.replace(\")\",\"\");\n         return temp2;\n     }\n \n     const addAndReplaceLabels = (singleLine_content,x,numberOfLabelsPassed) => {\n             symbols[singleLine_content] = x-numberOfLabelsPassed;\n             const tobeReturned =  x - numberOfLabelsPassed;\n             return tobeReturned;\n             \n     }\n \n     for(var x=0;x<content.length;x++){\n         // console.log(\"THis is are the Labels baby\",content[x])\n      if(content[x].includes('(')){\n        \n         const extracted = extractor(content[x]);\n         const toBeUpdated = \"@\" + addAndReplaceLabels(extracted,x,numberOfLabelsPassed);\n         numberOfLabelsPassed++;\n      }\n      else if(!content[x].includes('(') && !content[x].includes(')')){\n          content_updated.push(content[x]);\n      }\n }  \n // console.log(\"This is the Handled Label Bitches\",content_updated,symbols)\n return (\n     <div>\n     <Variablehandlng content= {content_updated}/>\n     </div>\n );\n }\n\n\n const Variablehandlng = ({content}) => {\n\n    let count = 16;\n    const regAinstruction = /@[0-9]/;\n\n    const addNewVariables = (tobeAddedSymbol) => {\n    \n        symbols[tobeAddedSymbol] = count.toString();\n        const tobeReplaced =  replacExisitingVariables(tobeAddedSymbol);\n        count++;\n        return tobeReplaced;\n}\n\nconst replacExisitingVariables = (singleLine_content) => {\n    Object.keys(symbols).map((item) => {\n        if(singleLine_content.trim() === item){\n            let updatedSymbol = \"@\" + symbols[item];\n            singleLine_content = updatedSymbol;   \n        }\n    })\n    return singleLine_content;\n}\n\nfor(var x=0;x<content.length;x++){\n    if(content[x].includes('@') && !regAinstruction.test(content[x])){\n        content[x] = content[x].replace('@','');\n\n        if(Object.keys(symbols).includes(content[x].trim())){\n            const  replacedVarible = replacExisitingVariables(content[x]);\n            content[x] = replacedVarible;\n          \n        }\n        else{\n                const  updatedVariable = addNewVariables(content[x].trim());\n                content[x] = updatedVariable;\n             \n        }\n    }\n   \n}\nreturn (\n    <div>\n        <Ainstruction content={content}/>\n        </div>\n);\n\n}\n\n export default SymbolsHandling;"]},"metadata":{},"sourceType":"module"}