{"ast":null,"code":"var _jsxFileName = \"/home/mike/Documents/Assembler/src/Components/Symbols/Variablehandlng.js\";\nimport Ainstruction from '../Ainstruction';\n\nconst Variablehandlng = ({\n  content\n}) => {\n  let count = 16;\n  const regAinstruction = /@[0-9]/;\n\n  const addNewVariables = tobeAddedSymbol => {\n    symbols[tobeAddedSymbol] = count.toString();\n    const tobeReplaced = replacExisitingVariables(tobeAddedSymbol);\n    count++;\n    return tobeReplaced;\n  };\n\n  const replacExisitingVariables = singleLine_content => {\n    Object.keys(symbols).map(item => {\n      if (singleLine_content.trim() === item) {\n        let updatedSymbol = \"@\" + symbols[item];\n        singleLine_content = updatedSymbol;\n      }\n    });\n    return singleLine_content;\n  };\n\n  for (var x = 0; x < content.length; x++) {\n    if (content[x].includes('@') && !regAinstruction.test(content[x])) {\n      content[x] = content[x].replace('@', '');\n\n      if (Object.keys(symbols).includes(content[x].trim())) {\n        const replacedVarible = replacExisitingVariables(content[x]);\n        content[x] = replacedVarible;\n      } else {\n        const updatedVariable = addNewVariables(content[x].trim());\n        content[x] = updatedVariable;\n      }\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Ainstruction, {\n    content: content,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }));\n};\n\nexport default Variablehandlng;","map":{"version":3,"sources":["/home/mike/Documents/Assembler/src/Components/Symbols/Variablehandlng.js"],"names":["Ainstruction","Variablehandlng","content","count","regAinstruction","addNewVariables","tobeAddedSymbol","symbols","toString","tobeReplaced","replacExisitingVariables","singleLine_content","Object","keys","map","item","trim","updatedSymbol","x","length","includes","test","replace","replacedVarible","updatedVariable"],"mappings":";AAAA,OAAOA,YAAP,MAAyB,iBAAzB;;AAEA,MAAMC,eAAe,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAe;AAEnC,MAAIC,KAAK,GAAG,EAAZ;AACA,QAAMC,eAAe,GAAG,QAAxB;;AAEA,QAAMC,eAAe,GAAIC,eAAD,IAAqB;AAEzCC,IAAAA,OAAO,CAACD,eAAD,CAAP,GAA2BH,KAAK,CAACK,QAAN,EAA3B;AACA,UAAMC,YAAY,GAAIC,wBAAwB,CAACJ,eAAD,CAA9C;AACAH,IAAAA,KAAK;AACL,WAAOM,YAAP;AACP,GANG;;AAQJ,QAAMC,wBAAwB,GAAIC,kBAAD,IAAwB;AACrDC,IAAAA,MAAM,CAACC,IAAP,CAAYN,OAAZ,EAAqBO,GAArB,CAA0BC,IAAD,IAAU;AAC/B,UAAGJ,kBAAkB,CAACK,IAAnB,OAA8BD,IAAjC,EAAsC;AAClC,YAAIE,aAAa,GAAG,MAAMV,OAAO,CAACQ,IAAD,CAAjC;AACAJ,QAAAA,kBAAkB,GAAGM,aAArB;AACH;AACJ,KALD;AAMA,WAAON,kBAAP;AACH,GARD;;AAUA,OAAI,IAAIO,CAAC,GAAC,CAAV,EAAYA,CAAC,GAAChB,OAAO,CAACiB,MAAtB,EAA6BD,CAAC,EAA9B,EAAiC;AAC7B,QAAGhB,OAAO,CAACgB,CAAD,CAAP,CAAWE,QAAX,CAAoB,GAApB,KAA4B,CAAChB,eAAe,CAACiB,IAAhB,CAAqBnB,OAAO,CAACgB,CAAD,CAA5B,CAAhC,EAAiE;AAC7DhB,MAAAA,OAAO,CAACgB,CAAD,CAAP,GAAahB,OAAO,CAACgB,CAAD,CAAP,CAAWI,OAAX,CAAmB,GAAnB,EAAuB,EAAvB,CAAb;;AAEA,UAAGV,MAAM,CAACC,IAAP,CAAYN,OAAZ,EAAqBa,QAArB,CAA8BlB,OAAO,CAACgB,CAAD,CAAP,CAAWF,IAAX,EAA9B,CAAH,EAAoD;AAChD,cAAOO,eAAe,GAAGb,wBAAwB,CAACR,OAAO,CAACgB,CAAD,CAAR,CAAjD;AACAhB,QAAAA,OAAO,CAACgB,CAAD,CAAP,GAAaK,eAAb;AAEH,OAJD,MAKI;AACI,cAAOC,eAAe,GAAGnB,eAAe,CAACH,OAAO,CAACgB,CAAD,CAAP,CAAWF,IAAX,EAAD,CAAxC;AACAd,QAAAA,OAAO,CAACgB,CAAD,CAAP,GAAaM,eAAb;AAEP;AACJ;AAEJ;;AACD,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,YAAD;AAAc,IAAA,OAAO,EAAEtB,OAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ;AAMC,CA9CD;;AAgDA,eAAeD,eAAf","sourcesContent":["import Ainstruction from '../Ainstruction';\n\nconst Variablehandlng = ({content}) => {\n\n    let count = 16;\n    const regAinstruction = /@[0-9]/;\n\n    const addNewVariables = (tobeAddedSymbol) => {\n    \n        symbols[tobeAddedSymbol] = count.toString();\n        const tobeReplaced =  replacExisitingVariables(tobeAddedSymbol);\n        count++;\n        return tobeReplaced;\n}\n\nconst replacExisitingVariables = (singleLine_content) => {\n    Object.keys(symbols).map((item) => {\n        if(singleLine_content.trim() === item){\n            let updatedSymbol = \"@\" + symbols[item];\n            singleLine_content = updatedSymbol;   \n        }\n    })\n    return singleLine_content;\n}\n\nfor(var x=0;x<content.length;x++){\n    if(content[x].includes('@') && !regAinstruction.test(content[x])){\n        content[x] = content[x].replace('@','');\n\n        if(Object.keys(symbols).includes(content[x].trim())){\n            const  replacedVarible = replacExisitingVariables(content[x]);\n            content[x] = replacedVarible;\n          \n        }\n        else{\n                const  updatedVariable = addNewVariables(content[x].trim());\n                content[x] = updatedVariable;\n             \n        }\n    }\n   \n}\nreturn (\n    <div>\n        <Ainstruction content={content}/>\n        </div>\n);\n\n}\n\nexport default Variablehandlng;\n\n\n"]},"metadata":{},"sourceType":"module"}