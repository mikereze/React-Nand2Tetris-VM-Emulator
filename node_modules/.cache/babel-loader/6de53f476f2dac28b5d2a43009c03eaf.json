{"ast":null,"code":"var _jsxFileName = \"/home/mike/Documents/Nand2Tetris React Projects/VM Translator/src/Components/Codewriter.js\";\nimport React from 'react';\n\nconst Codewriter = ({\n  content\n}) => {\n  let Assembly_code = [\"dsbjfds\"];\n  const mappingObj = {\n    local: \"LCL\",\n    argument: \"ARG\",\n    this: \"THIS\",\n    that: \"THAT\",\n    temp: \"5\"\n  };\n\n  const pushHandler = singleLine => {\n    const singleLine_content = singleLine.replace(\"push\", \"\");\n\n    if (singleLine_content.includes(\"constant\") || singleLine_content.includes(\"pointer\")) {\n      const temp = singleLine_content.replace(\"constant\", \"\");\n      const singleLine_constant = temp.trim();\n      const tobePushed = \"@\" + singleLine_constant;\n      const constant_arr = [tobePushed, \"D=A\", \"@SP\", \"A=M\", \"M=D\", \"@SP\", \"M=M+1\"];\n      Assembly_code = [...Assembly_code, ...constant_arr];\n      return Assembly_code; // return console.log(\"This is the Number in the Constant\",constant_arr,\"and \",Assembly_code);\n    } else if (singleLine_content.includes(\"static\")) {\n      const temp = singleLine_content.replace(\"static\", \"\");\n      const singleLine_static = temp.trim();\n      return console.log(\"This is the Number in the static\", singleLine_static);\n    } else {\n      const tobeSeparated = singleLine_content.trim();\n      const segments = tobeSeparated.split(\" \");\n      console.log(\"This is the Segment\", segments[0], \"and this is the number\", segments[1]);\n      const firstValue = \"@\" + segments[1];\n      let nextValue = \"\";\n\n      if (Object.keys(mappingObj).includes(segments[0])) {\n        nextValue = \"@\" + mappingObj[segments[0]];\n      }\n\n      const segmentArr = [firstValue, \"D=A\", nextValue, \"A=M+D\", \"D=M\", \"@SP\", \"A=M\", \"M=D\", \"SP\", \"M=M+1\"];\n      Assembly_code = [...Assembly_code, ...segmentArr];\n      return Assembly_code;\n    }\n  };\n\n  const popHandler = singleLine => {\n    const singleLine_content = singleLine.replace(\"pop\", \"\");\n\n    if (singleLine_content.includes(\"pointer\")) {\n      const temp = singleLine_content.replace(\"pointer\", \"\");\n      const singleLine_pointer = temp.trim();\n      const tobeAdded = \"@\" + singleLine_pointer;\n      const pointerArr = [\"@SP\", \"M=M-1\", \"@SP\", \"A=M\", \"D=M\", tobeAdded, \"A=D\"];\n      Assembly_code = [...Assembly_code, ...pointerArr];\n      return Assembly_code;\n    } else if (singleLine_content.includes(\"static\")) {\n      return Assembly_code;\n    } else {\n      const tobeSeparated_Pop = singleLine_content.trim();\n      const segments_pop = tobeSeparated_Pop.split(\" \");\n      const first_pop = \"@\" + segments_pop[1];\n      let next_pop = \"\";\n\n      if (Object.keys(mappingObj).includes(segments_pop[0])) {\n        next_pop = \"@\" + mappingObj[segments_pop[0]];\n      }\n\n      const segment_pop_arr = [first_pop, \"D=A\", \"@SP\", \"A=M\", \"D=M\", \"@SP\", \"M=M-1\", next_pop, \"A=M+D\", \"M=D\"];\n      Assembly_code = [...Assembly_code, ...segment_pop_arr];\n      return Assembly_code;\n    }\n  };\n\n  const artihmeticHandler = singleLine_content => {\n    return console.log(\"This is the Arthimetic Members\", singleLine_content);\n  };\n\n  const codeReplacer = singleLine_content => {\n    if (singleLine_content.startsWith(\"push\")) {\n      pushHandler(singleLine_content);\n    } else if (singleLine_content.startsWith(\"pop\")) {\n      popHandler(singleLine_content);\n    } else {\n      artihmeticHandler(singleLine_content);\n    }\n  };\n\n  content.map(item => {\n    console.log(\"This is the Assembly\", Assembly_code);\n    return codeReplacer(item);\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }\n  }, \"Yo Niggas\");\n};\n\nexport default Codewriter;","map":{"version":3,"sources":["/home/mike/Documents/Nand2Tetris React Projects/VM Translator/src/Components/Codewriter.js"],"names":["React","Codewriter","content","Assembly_code","mappingObj","local","argument","this","that","temp","pushHandler","singleLine","singleLine_content","replace","includes","singleLine_constant","trim","tobePushed","constant_arr","singleLine_static","console","log","tobeSeparated","segments","split","firstValue","nextValue","Object","keys","segmentArr","popHandler","singleLine_pointer","tobeAdded","pointerArr","tobeSeparated_Pop","segments_pop","first_pop","next_pop","segment_pop_arr","artihmeticHandler","codeReplacer","startsWith","map","item"],"mappings":"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","sourcesContent":["import React from 'react';\n\nconst Codewriter = ({content}) => {\n\n    let Assembly_code = [\"dsbjfds\"];\n    const mappingObj = { local : \"LCL\",argument : \"ARG\", this: \"THIS\",that: \"THAT\",temp : \"5\"};\n\n\n    const pushHandler = (singleLine) => {\n        const singleLine_content = singleLine.replace(\"push\",\"\");\n        if(singleLine_content.includes(\"constant\") || singleLine_content.includes(\"pointer\")){\n            const temp = singleLine_content.replace(\"constant\",\"\");\n            const singleLine_constant = temp.trim();\n            const tobePushed = \"@\" + singleLine_constant;\n            const constant_arr = [tobePushed,\"D=A\",\"@SP\",\"A=M\",\"M=D\",\"@SP\",\"M=M+1\"];\n            Assembly_code = [...Assembly_code,...constant_arr];\n          return   Assembly_code\n            // return console.log(\"This is the Number in the Constant\",constant_arr,\"and \",Assembly_code);\n\n        }\n        else if(singleLine_content.includes(\"static\")){\n            const temp = singleLine_content.replace(\"static\",\"\");\n            const singleLine_static = temp.trim();\n            return console.log(\"This is the Number in the static\",singleLine_static);\n        }\n        else{\n            const tobeSeparated = singleLine_content.trim();\n            const segments = tobeSeparated.split(\" \");\n            console.log(\"This is the Segment\",segments[0],\"and this is the number\",segments[1]);\n            const firstValue = \"@\" +segments[1];\n            let nextValue = \"\";\n            if(Object.keys(mappingObj).includes(segments[0])){\n                    nextValue = \"@\" + mappingObj[segments[0]]\n            }\n            const segmentArr = [firstValue,\"D=A\",nextValue,\"A=M+D\",\"D=M\",\"@SP\",\"A=M\",\"M=D\",\"SP\",\"M=M+1\"]\n            Assembly_code = [...Assembly_code,...segmentArr]\n            return Assembly_code \n        }\n    }\n\n\n    const popHandler = (singleLine) => {\n        const singleLine_content = singleLine.replace(\"pop\",\"\");\n        if(singleLine_content.includes(\"pointer\")){\n            const temp = singleLine_content.replace(\"pointer\",\"\")\n            const singleLine_pointer = temp.trim();\n            const tobeAdded = \"@\" + singleLine_pointer;\n            const pointerArr = [\"@SP\",\"M=M-1\",\"@SP\",\"A=M\",\"D=M\",tobeAdded,\"A=D\"]\n            Assembly_code = [...Assembly_code,...pointerArr]\n            return Assembly_code;\n        }\n        else if(singleLine_content.includes(\"static\")){\n            return Assembly_code\n        }\n        else{\n            const tobeSeparated_Pop = singleLine_content.trim();\n            const segments_pop = tobeSeparated_Pop.split(\" \");\n            const first_pop = \"@\" +segments_pop[1];\n            let next_pop = \"\";\n            if(Object.keys(mappingObj).includes(segments_pop[0])){\n                next_pop = \"@\" + mappingObj[segments_pop[0]]\n            }\n            const segment_pop_arr = [first_pop,\"D=A\",\"@SP\",\"A=M\",\"D=M\",\"@SP\",\"M=M-1\",next_pop,\"A=M+D\",\"M=D\"];\n            Assembly_code = [...Assembly_code,...segment_pop_arr]\n            return Assembly_code\n        }\n    }\n\n\n    const artihmeticHandler = (singleLine_content) => {\n        return console.log(\"This is the Arthimetic Members\",singleLine_content);\n    }\n\n\n    const codeReplacer = (singleLine_content) => {\n        if(singleLine_content.startsWith(\"push\")){\n            pushHandler(singleLine_content);\n        }\n        else if(singleLine_content.startsWith(\"pop\")){\n            popHandler(singleLine_content);\n        }\n        else{\n            artihmeticHandler(singleLine_content);\n        }\n    }\n\n    content.map((item) =>{\n    console.log(\"This is the Assembly\",Assembly_code); \n        return codeReplacer(item)\n    }\n    );\n\n    return (\n        <div>\n            Yo Niggas\n        </div>\n    );\n}\n\nexport default Codewriter;"]},"metadata":{},"sourceType":"module"}